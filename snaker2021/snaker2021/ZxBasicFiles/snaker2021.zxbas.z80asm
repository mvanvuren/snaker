	.zxbasic
	org 32768
	; Defines HEAP SIZE
ZXBASIC_HEAP_SIZE EQU 4768
__START_PROGRAM:
	di
	push ix
	push iy
	exx
	push hl
	exx
	ld hl, 0
	add hl, sp
	ld (__CALL_BACK__), hl
	ei
	call __MEM_INIT
	call __PRINT_INIT
	ld de, __LABEL0
	ld hl, _StateInitialize
	call __STORE_STR
	ld de, __LABEL1
	ld hl, _StateShowHighScores
	call __STORE_STR
	ld de, __LABEL2
	ld hl, _StateShowInstructions
	call __STORE_STR
	ld de, __LABEL3
	ld hl, _StateStartGame
	call __STORE_STR
	ld de, __LABEL4
	ld hl, _StatePlayGame
	call __STORE_STR
	ld de, (_StateInitialize)
	ld hl, _State
	call __STORE_STR
	call _Main
	ld hl, 0
	ld b, h
	ld c, l
__END_PROGRAM:
	di
	ld hl, (__CALL_BACK__)
	ld sp, hl
	exx
	pop hl
	pop iy
	pop ix
	exx
	ei
	ret
__CALL_BACK__:
	DEFW 0
_UCase:
	push ix
	ld ix, 0
	add ix, sp
#line 25
		PROC
		LOCAL NULL_STR
		LOCAL LOOP
		LOCAL NEXT_CHAR
		ld l, (ix+4)
		ld h, (ix+5)
		ld a, h
		or l
		jr z, NULL_STR
		ld c,(hl)
		inc hl
		ld b,(hl)
LOOP:
		ld a, b
		or c
		jr z, NULL_STR
		inc hl
		ld a, (hl)
		cp 'a'
		jr c, NEXT_CHAR
		cp 'z'+1
		jr nc, NEXT_CHAR
		sub 32
		ld (hl), a
NEXT_CHAR:
		dec bc
		jr LOOP
NULL_STR:
		ENDP
#line 54
	ld l, (ix+4)
	ld h, (ix+5)
	call __LOADSTR
_UCase__leave:
	ex af, af'
	exx
	ld l, (ix+4)
	ld h, (ix+5)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_pos:
#line 27
		PROC
		call __LOAD_S_POSN
		ld a, e
		ENDP
#line 31
_pos__leave:
	ret
_csrlin:
#line 25
		PROC
		call __LOAD_S_POSN
		ld a, d
		ENDP
#line 29
_csrlin__leave:
	ret
_input:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld de, __LABEL5
	ld bc, -2
	call __PSTORE_STR
	ld a, (23611)
	or 8
	ld (23611), a
__LABEL6:
	call _PRIVATEInputShowCursor
	xor a
	ld (_input_LastK), a
__LABEL9:
	ld a, (_input_LastK)
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL9
	call _PRIVATEInputHideCursor
	ld a, (_input_LastK)
	sub 12
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL12
	ld l, (ix-2)
	ld h, (ix-1)
	call __STRLEN
	ld a, h
	or l
	jp z, __LABEL15
	ld l, (ix-2)
	ld h, (ix-1)
	call __STRLEN
	ld de, 1
	call __EQ16
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL16
	ld de, __LABEL5
	ld bc, -2
	call __PSTORE_STR
	jp __LABEL17
__LABEL16:
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld hl, 0
	push hl
	ld l, (ix-2)
	ld h, (ix-1)
	call __STRLEN
	dec hl
	dec hl
	push hl
	xor a
	call __STRSLICE
	ld d, h
	ld e, l
	ld bc, -2
	call __PSTORE_STR2
__LABEL17:
	ld hl, __LABEL18
	xor a
	call __PRINTSTR
__LABEL15:
	jp __LABEL13
__LABEL12:
	ld a, (_input_LastK)
	sub 32
	ccf
	sbc a, a
	call __NORMALIZE_BOOLEAN
	push af
	ld l, (ix-2)
	ld h, (ix-1)
	call __STRLEN
	push hl
	ld l, (ix+4)
	ld h, (ix+5)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	sbc a, a
	call __NORMALIZE_BOOLEAN
	ld h, a
	pop af
	or a
	jr z, __LABEL172
	ld a, h
__LABEL172:
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL20
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld a, (_input_LastK)
	push af
	ld hl, 1
	call CHR
	ex de, hl
	pop hl
	push de
	call __ADDSTR
	ex (sp), hl
	call __MEM_FREE
	pop hl
	ld d, h
	ld e, l
	ld bc, -2
	call __PSTORE_STR2
	ld a, (_input_LastK)
	push af
	ld hl, 1
	call CHR
	ld a, 1
	call __PRINTSTR
__LABEL20:
__LABEL13:
	ld a, (_input_LastK)
	sub 13
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL6
	ld (ix-4), 1
	ld (ix-3), 0
	jp __LABEL21
__LABEL24:
	xor a
	call OVER_TMP
	ld a, 8
	push af
	ld hl, 1
	call CHR
	ld de, __LABEL26
	push hl
	call __ADDSTR
	ex (sp), hl
	call __MEM_FREE
	pop hl
	push hl
	ld a, 8
	push af
	ld hl, 1
	call CHR
	ex de, hl
	pop hl
	push hl
	push de
	call __ADDSTR
	pop de
	ex (sp), hl
	push de
	call __MEM_FREE
	pop hl
	call __MEM_FREE
	pop hl
	ld a, 1
	call __PRINTSTR
	call COPY_ATTR
	ld l, (ix-4)
	ld h, (ix-3)
	inc hl
	ld (ix-4), l
	ld (ix-3), h
__LABEL21:
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	ld l, (ix-2)
	ld h, (ix-1)
	call __STRLEN
	pop de
	or a
	sbc hl, de
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL24
	ld l, (ix-2)
	ld h, (ix-1)
	call __LOADSTR
_input__leave:
	ex af, af'
	exx
	ld l, (ix-2)
	ld h, (ix-1)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_PRIVATEInputShowCursor:
	call _csrlin
	push af
	call _pos
	call PRINT_AT
	xor a
	call OVER_TMP
	ld a, 1
	call FLASH_TMP
	ld de, __LABEL18
	ld hl, __LABEL26
	call __ADDSTR
	ld a, 1
	call __PRINTSTR
	call COPY_ATTR
_PRIVATEInputShowCursor__leave:
	ret
_PRIVATEInputHideCursor:
	call _csrlin
	push af
	call _pos
	call PRINT_AT
	xor a
	call OVER_TMP
	xor a
	call FLASH_TMP
	ld de, __LABEL18
	ld hl, __LABEL26
	call __ADDSTR
	ld a, 1
	call __PRINTSTR
	call COPY_ATTR
_PRIVATEInputHideCursor__leave:
	ret
_ClearPosition:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+9)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+7)
	ld l, a
	ld h, 0
	push hl
	push ix
	pop hl
	ld de, 4
	add hl, de
	call __ARRAY_PTR
	ld (hl), 0
_ClearPosition__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_SetPosition:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+11)
	push af
	ld a, (ix+9)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+7)
	ld l, a
	ld h, 0
	push hl
	push ix
	pop hl
	ld de, 4
	add hl, de
	call __ARRAY_PTR
	pop af
	ld (hl), a
_SetPosition__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_SetMouse:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 128
	push af
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _SetPosition
_SetMouse__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_SetSnake:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 64
	or (ix+11)
	push af
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _SetPosition
_SetSnake__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_GetPosition:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+9)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+7)
	ld l, a
	ld h, 0
	push hl
	push ix
	pop hl
	ld de, 4
	add hl, de
	call __ARRAY_PTR
	ld a, (hl)
_GetPosition__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_ClearMouse:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _GetPosition
	ld (ix-1), a
	and 127
	push af
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _SetPosition
_ClearMouse__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_IsMouse:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _GetPosition
	and 128
	sub 128
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
_IsMouse__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_ShowMouse:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+7)
	add a, a
	push af
	ld a, (ix+9)
	add a, a
	call PRINT_AT
	ld a, 2
	call INK_TMP
	ld a, 6
	call PAPER_TMP
	ld a, 1
	call FLASH_TMP
	ld hl, __LABEL27
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
_ShowMouse__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_GetAdjecentPosition:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+5)
	dec a
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL28
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	dec a
	ld h, (ix+9)
	ld l, (ix+8)
	ld (hl), a
	jp __LABEL29
__LABEL28:
	ld a, (ix+5)
	sub 4
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL30
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	inc a
	ld h, (ix+9)
	ld l, (ix+8)
	ld (hl), a
	jp __LABEL31
__LABEL30:
	ld a, (ix+5)
	sub 3
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL32
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	dec a
	ld h, (ix+7)
	ld l, (ix+6)
	ld (hl), a
	jp __LABEL33
__LABEL32:
	ld a, (ix+5)
	sub 2
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL35
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	inc a
	ld h, (ix+7)
	ld l, (ix+6)
	ld (hl), a
__LABEL35:
__LABEL33:
__LABEL31:
__LABEL29:
_GetAdjecentPosition__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_ShowSnake:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _GetPosition
	ld (ix-1), a
	srl a
	srl a
	srl a
	and 7
	ld (ix-2), a
	ld a, (ix+7)
	add a, a
	ld (ix-3), a
	ld a, (ix+9)
	add a, a
	ld (ix-4), a
	ld a, (ix-3)
	push af
	ld a, (ix-4)
	call PRINT_AT
	ld a, 3
	call INK_TMP
	ld hl, __LABEL36
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	push ix
	pop hl
	ld de, -4
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -3
	add hl, de
	push hl
	ld a, (ix-2)
	push af
	call _GetAdjecentPosition
	ld a, (ix-3)
	push af
	ld a, (ix-4)
	call PRINT_AT
	ld a, 3
	call INK_TMP
	ld hl, __LABEL36
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
_ShowSnake__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_ClearSnake:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	add a, a
	ld (ix-1), a
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	add a, a
	ld (ix-2), a
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	push af
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _GetPosition
	ld (ix-3), a
	srl a
	srl a
	srl a
	and 7
	ld (ix-4), a
	ld a, (ix-3)
	and 7
	ld (ix-5), a
	ld a, (ix-1)
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld hl, __LABEL26
	xor a
	call __PRINTSTR
	call PRINT_EOL
	push ix
	pop hl
	ld de, -2
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -1
	add hl, de
	push hl
	ld a, (ix-4)
	push af
	call _GetAdjecentPosition
	ld a, (ix-1)
	push af
	ld a, (ix-2)
	call PRINT_AT
	ld hl, __LABEL26
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld l, (ix+8)
	ld h, (ix+9)
	push hl
	ld l, (ix+6)
	ld h, (ix+7)
	push hl
	ld a, (ix-5)
	push af
	call _GetAdjecentPosition
_ClearSnake__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_InitializeUserDefinedGraphic:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL37
__LABEL40:
	ld a, 1
	call __READ
	ld d, h
	ld e, l
	ld bc, -5
	call __PSTORE_STR2
	ld (ix-2), 0
	jp __LABEL42
__LABEL45:
	ld a, 3
	call __READ
	ld (ix-3), a
	ld l, (ix-5)
	ld h, (ix-4)
	xor a
	call USR_STR
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	ex de, hl
	pop hl
	add hl, de
	ld a, (ix-3)
	ld (hl), a
	inc (ix-2)
__LABEL42:
	ld a, 7
	cp (ix-2)
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL45
	inc (ix-1)
__LABEL37:
	ld a, 2
	cp (ix-1)
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL40
_InitializeUserDefinedGraphic__leave:
	ex af, af'
	exx
	ld l, (ix-5)
	ld h, (ix-4)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_InitializeScreen:
	push ix
	ld ix, 0
	add ix, sp
	xor a
	call BORDER
	xor a
	call PAPER
	call COPY_ATTR
	ld a, 4
	call INK
	call COPY_ATTR
	ld a, 1
	call BRIGHT
	call COPY_ATTR
	call CLS
_InitializeScreen__leave:
	ld sp, ix
	pop ix
	ret
_InitializeHighScores:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld (ix-1), 0
	jp __LABEL47
__LABEL50:
	ld a, 10
	sub (ix-1)
	ld l, a
	ld h, 0
	ld de, 1000
	call __MUL16_FAST
	ld de, 0
	push de
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	push hl
	push ix
	pop hl
	ld de, 4
	add hl, de
	call __ARRAY_PTR
	pop bc
	pop de
	call __STORE32
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	push hl
	push ix
	pop hl
	ld de, 6
	add hl, de
	call __ARRAY_PTR
	ld de, __LABEL52
	call __STORE_STR
	inc (ix-1)
__LABEL47:
	ld a, 9
	cp (ix-1)
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL50
_InitializeHighScores__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_ShowHighScoreAnimation:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -10
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 9
	ld d, h
	ld e, l
	inc de
	ldir
	ld (ix-2), 0
	ld (ix-1), 0
	ld (ix-4), 16
	ld (ix-3), 0
	ld (ix-6), 255
	ld (ix-5), 0
	ld (ix-8), 175
	ld (ix-7), 0
	ld de, (_StateShowInstructions)
	ld hl, _State
	call __STORE_STR
__LABEL53:
	ld l, (ix-8)
	ld h, (ix-7)
	ex de, hl
	ld hl, 0
	call __LTI16
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL54
	ld a, 1
	call OVER
	call COPY_ATTR
	ld l, (ix-2)
	ld h, (ix-1)
	ld a, l
	push af
	ld l, (ix-4)
	ld h, (ix-3)
	ld a, l
	call PLOT
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld hl, 0
	call DRAW
	ld hl, 0
	push hl
	ld l, (ix-8)
	ld h, (ix-7)
	call DRAW
	ld l, (ix-6)
	ld h, (ix-5)
	call __NEGHL
	push hl
	ld hl, 0
	call DRAW
	ld hl, 0
	push hl
	ld l, (ix-8)
	ld h, (ix-7)
	call __NEGHL
	inc hl
	call DRAW
	xor a
	call OVER
	call COPY_ATTR
	ld l, (ix-2)
	ld h, (ix-1)
	inc hl
	ld (ix-2), l
	ld (ix-1), h
	ld l, (ix-4)
	ld h, (ix-3)
	inc hl
	ld (ix-4), l
	ld (ix-3), h
	ld l, (ix-6)
	ld h, (ix-5)
	dec hl
	dec hl
	ld (ix-6), l
	ld (ix-5), h
	ld l, (ix-8)
	ld h, (ix-7)
	dec hl
	dec hl
	ld (ix-8), l
	ld (ix-7), h
	call INKEY
	push hl
	call _UCase
	ld d, h
	ld e, l
	ld bc, -10
	call __PSTORE_STR2
	ld l, (ix-10)
	ld h, (ix-9)
	ld de, __LABEL55
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp nz, __LABEL54
	ld l, (ix-10)
	ld h, (ix-9)
	ld de, __LABEL58
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL60
	ld de, (_StateStartGame)
	ld hl, _State
	call __STORE_STR
	jp __LABEL54
__LABEL60:
	ld l, (ix-10)
	ld h, (ix-9)
	ld de, __LABEL61
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL63
	call CLS
	ld a, 8
	call __STOP
	ld hl, 0
	ld b, h
	ld c, l
	jp __END_PROGRAM
__LABEL63:
	ld hl, 10
	call __PAUSE
	jp __LABEL53
__LABEL54:
_ShowHighScoreAnimation__leave:
	ex af, af'
	exx
	ld l, (ix-10)
	ld h, (ix-9)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_SaveHighScore:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	push ix
	pop hl
	ld bc, -1
	add hl, bc
	ex de, hl
	ld hl, __LABEL173
	ld bc, 1
	ldir
	ld l, (ix+8)
	ld h, (ix+9)
	ld e, (ix+10)
	ld d, (ix+11)
	push de
	push hl
	ld hl, 9
	push hl
	push ix
	pop hl
	ld de, 4
	add hl, de
	call __ARRAY_PTR
	call __ILOAD32
	call __SUB32
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp nz, _SaveHighScore__leave
	call CLS
	ld a, 4
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL66
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, __LABEL67
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld de, __LABEL68
	ld bc, -3
	call __PSTORE_STR
	ld hl, 4
	push hl
	call _input
	ld d, h
	ld e, l
	ld bc, -3
	call __PSTORE_STR2
__LABEL69:
	ld a, (ix-1)
	ld h, a
	xor a
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	push af
	ld l, (ix+8)
	ld h, (ix+9)
	ld e, (ix+10)
	ld d, (ix+11)
	push de
	push hl
	ld a, (ix-1)
	dec a
	ld l, a
	ld h, 0
	push hl
	push ix
	pop hl
	ld de, 4
	add hl, de
	call __ARRAY_PTR
	call __ILOAD32
	pop bc
	or a
	sbc hl, bc
	ex de, hl
	pop de
	sbc hl, de
	sbc a, a
	call __NORMALIZE_BOOLEAN
	ld h, a
	pop af
	or a
	jr z, __LABEL174
	ld a, h
__LABEL174:
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL70
	ld a, (ix-1)
	dec a
	ld l, a
	ld h, 0
	push hl
	push ix
	pop hl
	ld de, 4
	add hl, de
	call __ARRAY_PTR
	call __ILOAD32
	push de
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	push hl
	push ix
	pop hl
	ld de, 4
	add hl, de
	call __ARRAY_PTR
	pop bc
	pop de
	call __STORE32
	ld hl, 1
	push hl
	ld a, (ix-1)
	dec a
	ld l, a
	ld h, 0
	push hl
	push ix
	pop hl
	ld de, 6
	add hl, de
	call __ARRAY_PTR
	call __ILOADSTR
	push hl
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	push hl
	push ix
	pop hl
	ld de, 6
	add hl, de
	call __ARRAY_PTR
	pop de
	call __STORE_STR2
	dec (ix-1)
	jp __LABEL69
__LABEL70:
	ld l, (ix+8)
	ld h, (ix+9)
	ld e, (ix+10)
	ld d, (ix+11)
	push de
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	push hl
	push ix
	pop hl
	ld de, 4
	add hl, de
	call __ARRAY_PTR
	pop bc
	pop de
	call __STORE32
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld hl, 0
	push hl
	ld hl, 3
	push hl
	xor a
	call __STRSLICE
	push hl
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	push hl
	push ix
	pop hl
	ld de, 6
	add hl, de
	call __ARRAY_PTR
	pop de
	call __STORE_STR2
_SaveHighScore__leave:
	ex af, af'
	exx
	ld l, (ix-3)
	ld h, (ix-2)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_ShowHighScores:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	call CLS
	ld a, 2
	push af
	ld a, 12
	call PRINT_AT
	ld a, 3
	call INK_TMP
	ld hl, __LABEL71
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 6
	push af
	ld a, 4
	call PRINT_AT
	ld hl, __LABEL72
	xor a
	call __PRINTSTR
	ld a, 6
	push af
	ld a, 21
	call PRINT_AT
	ld hl, __LABEL73
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld (ix-1), 0
	jp __LABEL74
__LABEL77:
	ld a, (ix-1)
	add a, 8
	ld (ix-2), a
	push af
	ld a, 2
	call PRINT_AT
	ld a, (ix-1)
	inc a
	call __PRINTU8
	ld a, (ix-2)
	push af
	ld a, 6
	call PRINT_AT
	ld a, (ix-1)
	ld l, a
	ld h, 0
	push hl
	push ix
	pop hl
	ld de, 4
	add hl, de
	call __ARRAY_PTR
	call __ILOAD32
	call __PRINTU32
	ld a, (ix-2)
	push af
	ld a, 21
	call PRINT_AT
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	push hl
	push ix
	pop hl
	ld de, 6
	add hl, de
	call __ARRAY_PTR
	call __ILOADSTR
	ld a, 1
	call __PRINTSTR
	call PRINT_EOL
	inc (ix-1)
__LABEL74:
	ld a, 9
	cp (ix-1)
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL77
	ld a, 19
	push af
	ld a, 1
	call PRINT_AT
	ld hl, __LABEL79
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 20
	push af
	ld a, 1
	call PRINT_AT
	ld hl, __LABEL80
	xor a
	call __PRINTSTR
	call PRINT_EOL
	call _ShowHighScoreAnimation
_ShowHighScores__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_ShowInstructions:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	call CLS
	ld (ix-1), 7
	jp __LABEL81
__LABEL84:
	ld a, (ix-1)
	call INK
	call COPY_ATTR
	ld a, 2
	push af
	ld a, 12
	call PRINT_AT
	ld hl, __LABEL71
	xor a
	call __PRINTSTR
	ld a, 4
	push af
	xor a
	call PRINT_AT
	ld hl, __LABEL86
	xor a
	call __PRINTSTR
	call PRINT_COMMA
	ld hl, __LABEL87
	xor a
	call __PRINTSTR
	call PRINT_COMMA
	ld hl, __LABEL88
	xor a
	call __PRINTSTR
	call PRINT_COMMA
	ld hl, __LABEL89
	xor a
	call __PRINTSTR
	call PRINT_COMMA
	ld hl, __LABEL90
	xor a
	call __PRINTSTR
	call PRINT_COMMA
	ld hl, __LABEL91
	xor a
	call __PRINTSTR
	call PRINT_COMMA
	ld hl, __LABEL92
	xor a
	call __PRINTSTR
	call PRINT_COMMA
	ld hl, __LABEL93
	xor a
	call __PRINTSTR
	ld a, 13
	push af
	ld a, 11
	call PRINT_AT
	ld hl, __LABEL94
	xor a
	call __PRINTSTR
	call PRINT_EOL
	call _PlaySoundEatMouse
	ld hl, 10
	call __PAUSE
	dec (ix-1)
__LABEL81:
	ld a, (ix-1)
	cp 4
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL84
	ld hl, 0
	call __PAUSE
_ShowInstructions__leave:
	ld sp, ix
	pop ix
	ret
_InitializeLevel:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	call CLS
	ld (ix-1), 0
	jp __LABEL95
__LABEL98:
	ld a, (ix-1)
	add a, a
	inc a
	push af
	xor a
	call PRINT_AT
	ld hl, __LABEL100
	xor a
	call __PRINTSTR
	call PRINT_EOL
	inc (ix-1)
__LABEL95:
	ld a, 9
	cp (ix-1)
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL98
	ld de, 0
	ld hl, 0
	call RANDOMIZE
	ld (ix-1), 0
	jp __LABEL101
__LABEL104:
	ld (ix-2), 0
	jp __LABEL106
__LABEL109:
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _ClearPosition
	inc (ix-2)
__LABEL106:
	ld a, 15
	cp (ix-2)
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL109
	ld a, (ix-1)
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp nz, __LABEL105
	ld (ix-3), 2
__LABEL113:
	ld a, (ix-3)
	ld h, a
	xor a
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL114
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00000h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-2), a
	push af
	ld a, (ix-1)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _IsMouse
	or a
	jp nz, __LABEL113
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _SetMouse
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _ShowMouse
	dec (ix-3)
	jp __LABEL113
__LABEL114:
__LABEL105:
	inc (ix-1)
__LABEL101:
	ld a, 10
	cp (ix-1)
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL104
_InitializeLevel__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_ShowStatus:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 22
	push af
	xor a
	call PRINT_AT
	ld hl, __LABEL117
	xor a
	call __PRINTSTR
	ld l, (ix+4)
	ld h, (ix+5)
	call __PRINTU16
	ld hl, __LABEL26
	xor a
	call __PRINTSTR
	ld a, 22
	push af
	ld a, 23
	call PRINT_AT
	ld hl, __LABEL118
	xor a
	call __PRINTSTR
	ld a, (ix+11)
	call __PRINTU8
	call PRINT_EOL
	ld a, 23
	push af
	xor a
	call PRINT_AT
	ld hl, __LABEL119
	xor a
	call __PRINTSTR
	ld l, (ix+6)
	ld h, (ix+7)
	ld e, (ix+8)
	ld d, (ix+9)
	call __PRINTU32
	ld a, 23
	push af
	ld a, 23
	call PRINT_AT
	ld hl, __LABEL120
	xor a
	call __PRINTSTR
	ld a, (ix+13)
	call __PRINTU8
	call PRINT_EOL
_ShowStatus__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_InitializeSnake:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	push ix
	pop hl
	ld bc, -2
	add hl, bc
	ex de, hl
	ld hl, __LABEL175
	ld bc, 1
	ldir
	ld a, (ix+7)
	add a, 2
	ld (ix-3), a
	ld h, a
	ld a, 15
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL122
	ld (ix-3), 15
__LABEL122:
	ld (ix-1), 1
	jp __LABEL123
__LABEL126:
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	xor a
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _SetSnake
	ld a, (ix-1)
	push af
	xor a
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _ShowSnake
	inc (ix-1)
__LABEL123:
	ld a, (ix-3)
	cp (ix-1)
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL126
_InitializeSnake__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_ClearTail:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	ld (ix-1), a
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	ld (ix-2), a
	ld l, (ix+8)
	ld h, (ix+9)
	push hl
	ld l, (ix+6)
	ld h, (ix+7)
	push hl
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _ClearSnake
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _ClearPosition
_ClearTail__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_PlaySoundExplosion:
	push ix
	ld ix, 0
	add ix, sp
#line 287
		PUSH    IX
		LD		A, ($5C48)
		RRA
		RRA
		RRA
		AND		$07
		POP		HL
		PUSH	HL
		LD		E,A
		LD		C,$00
		exp_1
		LD		D,$0F
		exp_2
		LD		A,(HL)
		AND		$10
		ADD		A,E
		OUT		($FE),A
		LD		B,C
		exp_3
		DJNZ	exp_3
		INC		HL
		DEC		D
		JR		NZ,exp_2
		DEC		C
		JR		NZ,exp_1
		POP IX
#line 313
_PlaySoundExplosion__leave:
	ld sp, ix
	pop ix
	ret
_PlaySoundEatMouse:
	push ix
	ld ix, 0
	add ix, sp
#line 319
		PUSH	IX
		LD		BC,$0050
		LD		HL,$0500
		zap
		SBC		HL,BC
		LD		DE,$0001
		PUSH	HL
		PUSH	BC
		CALL	$03B5
		POP		BC
		POP		HL
		LD		A,H
		AND		A
		JR		NZ,zap
		POP		IX
#line 334
_PlaySoundEatMouse__leave:
	ld sp, ix
	pop ix
	ret
_GetDirection:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	call INKEY
	ld a, 1
	call VAL
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 4
	call __SUB32
	ld (ix-2), l
	ld (ix-1), h
	ld l, (ix-2)
	ld h, (ix-1)
	ex de, hl
	ld hl, 1
	call __LEI16
	call __NORMALIZE_BOOLEAN
	push af
	ld l, (ix-2)
	ld h, (ix-1)
	ld de, 4
	call __LEI16
	call __NORMALIZE_BOOLEAN
	ld h, a
	pop af
	or a
	jr z, __LABEL176
	ld a, h
__LABEL176:
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL129
	ld l, (ix-2)
	ld h, (ix-1)
	ld de, 1
	call __EQ16
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix+9)
	ld h, a
	xor a
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	ld h, a
	pop af
	or a
	jr z, __LABEL177
	ld a, h
__LABEL177:
	call __NORMALIZE_BOOLEAN
	push af
	ld l, (ix-2)
	ld h, (ix-1)
	ld de, 4
	call __EQ16
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix+9)
	cp 15
	sbc a, a
	call __NORMALIZE_BOOLEAN
	ld h, a
	pop af
	or a
	jr z, __LABEL178
	ld a, h
__LABEL178:
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	push af
	ld l, (ix-2)
	ld h, (ix-1)
	ld de, 3
	call __EQ16
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix+7)
	ld h, a
	xor a
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	ld h, a
	pop af
	or a
	jr z, __LABEL179
	ld a, h
__LABEL179:
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	push af
	ld l, (ix-2)
	ld h, (ix-1)
	ld de, 2
	call __EQ16
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix+7)
	cp 10
	sbc a, a
	call __NORMALIZE_BOOLEAN
	ld h, a
	pop af
	or a
	jr z, __LABEL180
	ld a, h
__LABEL180:
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL131
	ld h, (ix+5)
	ld l, (ix+4)
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld hl, _reverseDirection
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld l, (ix-2)
	ld h, (ix-1)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	ld a, h
	or l
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL133
	ld l, (ix-2)
	ld h, (ix-1)
	ld a, l
	ld h, (ix+5)
	ld l, (ix+4)
	ld (hl), a
__LABEL133:
__LABEL131:
__LABEL129:
_GetDirection__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_MoveSnake:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld h, (ix+13)
	ld l, (ix+12)
	ld (hl), 0
	ld h, (ix+15)
	ld l, (ix+14)
	ld (hl), 0
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	push af
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	push af
	ld l, (ix+10)
	ld h, (ix+11)
	push hl
	call _GetDirection
	push ix
	pop hl
	ld de, -1
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -2
	add hl, de
	push hl
	ld h, (ix+11)
	ld l, (ix+10)
	ld a, (hl)
	push af
	call _GetAdjecentPosition
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	add a, (ix-2)
	or a
	sbc a, a
	call __NORMALIZE_BOOLEAN
	push af
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	add a, (ix-2)
	ld h, a
	ld a, 10
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	push af
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	add a, (ix-1)
	or a
	sbc a, a
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	push af
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	add a, (ix-1)
	ld h, a
	ld a, 15
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	or a
	jp nz, _MoveSnake__leave
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	push af
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _GetPosition
	ld (ix-3), a
	and 248
	ld h, (ix+11)
	ld l, (ix+10)
	or (hl)
	ld (ix-3), a
	push af
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	push af
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _SetPosition
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	add a, (ix-1)
	ld h, (ix+9)
	ld l, (ix+8)
	ld (hl), a
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	add a, (ix-2)
	ld h, (ix+7)
	ld l, (ix+6)
	ld (hl), a
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	push af
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _GetPosition
	ld (ix-3), a
	and 192
	ld h, (ix+13)
	ld l, (ix+12)
	ld (hl), a
	ld h, (ix+13)
	ld l, (ix+12)
	ld a, (hl)
	push af
	ld h, (ix+11)
	ld l, (ix+10)
	ld a, (hl)
	ld l, a
	ld h, 0
	push hl
	ld hl, _reverseDirection
	call __ARRAY
	pop de
	ld a, (hl)
	add a, a
	add a, a
	add a, a
	or d
	ld h, (ix+11)
	ld l, (ix+10)
	or (hl)
	ld (ix-3), a
	push af
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	push af
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _SetSnake
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	push af
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _ShowSnake
	ld h, (ix+15)
	ld l, (ix+14)
	ld (hl), 1
_MoveSnake__leave:
	exx
	ld hl, 12
__EXIT_FUNCTION:
	ld sp, ix
	pop ix
	pop de
	add hl, sp
	ld sp, hl
	push de
	exx
	ret
_RollupSnake:
	push ix
	ld ix, 0
	add ix, sp
__LABEL136:
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	sub (ix+11)
	call __NORMALIZE_BOOLEAN
	push af
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	sub (ix+13)
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL137
	ld l, (ix+8)
	ld h, (ix+9)
	push hl
	ld l, (ix+6)
	ld h, (ix+7)
	push hl
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _ClearTail
	ld hl, 5
	call __PAUSE
	jp __LABEL136
__LABEL137:
_RollupSnake__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_Initialize:
	push ix
	ld ix, 0
	add ix, sp
	call _InitializeUserDefinedGraphic
	call _InitializeScreen
	ld l, (ix+6)
	ld h, (ix+7)
	push hl
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _InitializeHighScores
_Initialize__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_StartGame:
	push ix
	ld ix, 0
	add ix, sp
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _InitializeLevel
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _InitializeSnake
_StartGame__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_CalculateTailCount:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 13
	cp (ix+5)
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL139
	ld (ix+5), 13
__LABEL139:
	ld a, 15
	sub (ix+5)
	ld l, a
	ld h, 0
_CalculateTailCount__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_CalculateStartTime:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 13
	cp (ix+5)
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL141
	ld (ix+5), 13
__LABEL141:
	ld a, (ix+5)
	dec a
	ld h, 20
	call __MUL8_FAST
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, 500
	or a
	sbc hl, de
_CalculateStartTime__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_PlayGame:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -11
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 10
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL181
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -5
	add hl, bc
	ex de, hl
	ld hl, __LABEL182
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -9
	add hl, bc
	ex de, hl
	ld hl, __LABEL183
	ld bc, 1
	ldir
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	push af
	call _CalculateStartTime
	ld (ix-11), l
	ld (ix-10), h
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	push af
	call _CalculateTailCount
	ld a, l
	ld (ix-8), a
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	add a, 2
	ld (ix-2), a
	ld h, a
	ld a, 15
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL143
	ld (ix-2), 15
__LABEL143:
__LABEL144:
	ld de, (_StatePlayGame)
	ld hl, (_State)
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL145
	ld hl, 10
	call __PAUSE
	ld l, (ix-11)
	ld h, (ix-10)
	dec hl
	ld (ix-11), l
	ld (ix-10), h
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	push af
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	push af
	ld h, (ix+11)
	ld l, (ix+10)
	call __ILOAD32
	push de
	push hl
	ld l, (ix-11)
	ld h, (ix-10)
	push hl
	call _ShowStatus
	push ix
	pop hl
	ld de, -7
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -6
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -5
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -2
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -1
	add hl, de
	push hl
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _MoveSnake
	ld a, (ix-7)
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	push af
	ld l, (ix-11)
	ld h, (ix-10)
	ex de, hl
	ld hl, 0
	or a
	sbc hl, de
	sbc a, a
	call __NORMALIZE_BOOLEAN
	ld h, a
	pop af
	or a
	jr z, __LABEL184
	ld a, h
__LABEL184:
	call __NORMALIZE_BOOLEAN
	or a
	jp nz, __LABEL144
	ld a, (ix-6)
	and 64
	sub 64
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	push af
	ld l, (ix-11)
	ld h, (ix-10)
	ld de, 0
	call __EQ16
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL149
	call _PlaySoundExplosion
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	push ix
	pop hl
	ld de, -4
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -3
	add hl, de
	push hl
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _RollupSnake
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	dec a
	ld h, (ix+9)
	ld l, (ix+8)
	ld (hl), a
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	ld h, a
	xor a
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL150
	ld de, (_StateStartGame)
	ld hl, _State
	call __STORE_STR
	jp __LABEL151
__LABEL150:
	ld de, (_StateShowHighScores)
	ld hl, _State
	call __STORE_STR
__LABEL151:
__LABEL149:
	ld a, (ix-6)
	and 128
	sub 128
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL153
	ld h, (ix+11)
	ld l, (ix+10)
	call __ILOAD32
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 50
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld bc, 10
	call __PISTORE32
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _ClearMouse
	call _PlaySoundEatMouse
	dec (ix-9)
	ld a, (ix-9)
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL155
	ld h, (ix+11)
	ld l, (ix+10)
	call __ILOAD32
	push de
	push hl
	ld l, (ix-11)
	ld h, (ix-10)
	ld de, 10
	call __MUL16_FAST
	pop bc
	ld de, 0
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld bc, 10
	call __PISTORE32
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	inc a
	ld h, (ix+7)
	ld l, (ix+6)
	ld (hl), a
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	ld h, 5
	call __MODU8_FAST
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL157
	ld h, (ix+9)
	ld l, (ix+8)
	ld a, (hl)
	inc a
	ld h, (ix+9)
	ld l, (ix+8)
	ld (hl), a
__LABEL157:
	ld de, (_StateStartGame)
	ld hl, _State
	call __STORE_STR
__LABEL155:
__LABEL153:
	dec (ix-8)
	ld a, (ix-8)
	ld h, a
	xor a
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL158
	push ix
	pop hl
	ld de, -4
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -3
	add hl, de
	push hl
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	call _ClearTail
	jp __LABEL159
__LABEL158:
	ld h, (ix+7)
	ld l, (ix+6)
	ld a, (hl)
	push af
	call _CalculateTailCount
	ld a, l
	ld (ix-8), a
__LABEL159:
	jp __LABEL144
__LABEL145:
_PlayGame__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_Main:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -18
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 17
	ld d, h
	ld e, l
	inc de
	ldir
	ld hl, -6
	ld de, __LABEL185
	ld bc, 176
	call __ALLOC_LOCAL_ARRAY
	ld hl, -10
	ld de, __LABEL186
	ld bc, 40
	call __ALLOC_LOCAL_ARRAY
	ld hl, -14
	ld de, __LABEL187
	ld bc, 100
	call __ALLOC_LOCAL_ARRAY
	push ix
	pop hl
	ld bc, -1
	add hl, bc
	ex de, hl
	ld hl, __LABEL188
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -2
	add hl, bc
	ex de, hl
	ld hl, __LABEL189
	ld bc, 1
	ldir
__LABEL160:
	ld de, (_StateInitialize)
	ld hl, (_State)
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL163
	push ix
	pop hl
	ld de, -14
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -10
	add hl, de
	push hl
	call _Initialize
	ld de, (_StateShowHighScores)
	ld hl, _State
	call __STORE_STR
__LABEL163:
	ld de, (_StateShowHighScores)
	ld hl, (_State)
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL165
	ld l, (ix-18)
	ld h, (ix-17)
	ld e, (ix-16)
	ld d, (ix-15)
	push de
	push hl
	push ix
	pop hl
	ld de, -14
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -10
	add hl, de
	push hl
	call _SaveHighScore
	push ix
	pop hl
	ld de, -14
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -10
	add hl, de
	push hl
	call _ShowHighScores
	ld (ix-1), 1
	ld (ix-2), 3
	ld de, 0
	ld hl, 0
	ld bc, -18
	call __PSTORE32
__LABEL165:
	ld de, (_StateShowInstructions)
	ld hl, (_State)
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL167
	call _ShowInstructions
	ld de, (_StateStartGame)
	ld hl, _State
	call __STORE_STR
__LABEL167:
	ld de, (_StateStartGame)
	ld hl, (_State)
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL169
	push ix
	pop hl
	ld de, -2
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -1
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -6
	add hl, de
	push hl
	call _StartGame
	ld de, (_StatePlayGame)
	ld hl, _State
	call __STORE_STR
__LABEL169:
	ld de, (_StatePlayGame)
	ld hl, (_State)
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL171
	push ix
	pop hl
	ld de, -18
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -2
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -1
	add hl, de
	push hl
	push ix
	pop hl
	ld de, -6
	add hl, de
	push hl
	call _PlayGame
__LABEL171:
	jp __LABEL160
_Main__leave:
	ex af, af'
	exx
	ld l, (ix-4)
	ld h, (ix-3)
	call __MEM_FREE
	ld l, (ix-8)
	ld h, (ix-7)
	call __MEM_FREE
	ld hl, 50
	push hl
	ld l, (ix-12)
	ld h, (ix-11)
	call __ARRAYSTR_FREE_MEM
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_InitializeUserDefinedGraphic___DATA__FUNCPTR__0:
	ld hl, __LABEL36
	call __LOADSTR
_InitializeUserDefinedGraphic___DATA__FUNCPTR__0__leave:
	ret
_InitializeUserDefinedGraphic___DATA__FUNCPTR__1:
	ld hl, __LABEL27
	call __LOADSTR
_InitializeUserDefinedGraphic___DATA__FUNCPTR__1__leave:
	ret
__DATA__0:
	DEFB 81h
	DEFW _InitializeUserDefinedGraphic___DATA__FUNCPTR__0
	DEFB 3
	DEFB 60
	DEFB 3
	DEFB 126
	DEFB 3
	DEFB 126
	DEFB 3
	DEFB 255
	DEFB 3
	DEFB 255
	DEFB 3
	DEFB 126
	DEFB 3
	DEFB 126
	DEFB 3
	DEFB 60
__DATA__1:
	DEFB 81h
	DEFW _InitializeUserDefinedGraphic___DATA__FUNCPTR__1
	DEFB 3
	DEFB 0
	DEFB 3
	DEFB 0
	DEFB 3
	DEFB 60
	DEFB 3
	DEFB 60
	DEFB 3
	DEFB 60
	DEFB 3
	DEFB 60
	DEFB 3
	DEFB 0
	DEFB 3
	DEFB 0
__DATA__END:
	DEFB 00h
__LABEL0:
	DEFW 000Ah
	DEFB 49h
	DEFB 6Eh
	DEFB 69h
	DEFB 74h
	DEFB 69h
	DEFB 61h
	DEFB 6Ch
	DEFB 69h
	DEFB 7Ah
	DEFB 65h
__LABEL1:
	DEFW 000Eh
	DEFB 53h
	DEFB 68h
	DEFB 6Fh
	DEFB 77h
	DEFB 48h
	DEFB 69h
	DEFB 67h
	DEFB 68h
	DEFB 53h
	DEFB 63h
	DEFB 6Fh
	DEFB 72h
	DEFB 65h
	DEFB 73h
__LABEL2:
	DEFW 0010h
	DEFB 53h
	DEFB 68h
	DEFB 6Fh
	DEFB 77h
	DEFB 49h
	DEFB 6Eh
	DEFB 73h
	DEFB 74h
	DEFB 72h
	DEFB 75h
	DEFB 63h
	DEFB 74h
	DEFB 69h
	DEFB 6Fh
	DEFB 6Eh
	DEFB 73h
__LABEL3:
	DEFW 0009h
	DEFB 53h
	DEFB 74h
	DEFB 61h
	DEFB 72h
	DEFB 74h
	DEFB 47h
	DEFB 61h
	DEFB 6Dh
	DEFB 65h
__LABEL4:
	DEFW 0008h
	DEFB 50h
	DEFB 6Ch
	DEFB 61h
	DEFB 79h
	DEFB 47h
	DEFB 61h
	DEFB 6Dh
	DEFB 65h
__LABEL5:
	DEFW 0000h
__LABEL18:
	DEFW 0001h
	DEFB 08h
__LABEL26:
	DEFW 0001h
	DEFB 20h
__LABEL27:
	DEFW 0001h
	DEFB 90h
__LABEL36:
	DEFW 0001h
	DEFB 9Eh
__LABEL52:
	DEFW 0004h
	DEFB 2Dh
	DEFB 2Dh
	DEFB 2Dh
	DEFB 2Dh
__LABEL55:
	DEFW 0001h
	DEFB 49h
__LABEL58:
	DEFW 0001h
	DEFB 50h
__LABEL61:
	DEFW 0001h
	DEFB 51h
__LABEL66:
	DEFW 0012h
	DEFB 43h
	DEFB 4Fh
	DEFB 4Eh
	DEFB 47h
	DEFB 52h
	DEFB 41h
	DEFB 54h
	DEFB 55h
	DEFB 4Ch
	DEFB 41h
	DEFB 54h
	DEFB 49h
	DEFB 4Fh
	DEFB 4Eh
	DEFB 53h
	DEFB 21h
	DEFB 21h
	DEFB 21h
__LABEL67:
	DEFW 0017h
	DEFB 59h
	DEFB 4Fh
	DEFB 55h
	DEFB 52h
	DEFB 20h
	DEFB 49h
	DEFB 4Eh
	DEFB 49h
	DEFB 54h
	DEFB 49h
	DEFB 41h
	DEFB 4Ch
	DEFB 53h
	DEFB 2Ch
	DEFB 50h
	DEFB 4Ch
	DEFB 45h
	DEFB 41h
	DEFB 53h
	DEFB 45h
	DEFB 21h
	DEFB 21h
	DEFB 21h
__LABEL68:
	DEFW 0004h
	DEFB 2Eh
	DEFB 2Eh
	DEFB 2Eh
	DEFB 2Eh
__LABEL71:
	DEFW 0006h
	DEFB 53h
	DEFB 4Eh
	DEFB 41h
	DEFB 4Bh
	DEFB 45h
	DEFB 52h
__LABEL72:
	DEFW 0008h
	DEFB 48h
	DEFB 49h
	DEFB 2Dh
	DEFB 53h
	DEFB 43h
	DEFB 4Fh
	DEFB 52h
	DEFB 45h
__LABEL73:
	DEFW 0008h
	DEFB 49h
	DEFB 4Eh
	DEFB 49h
	DEFB 54h
	DEFB 49h
	DEFB 41h
	DEFB 4Ch
	DEFB 53h
__LABEL79:
	DEFW 001Dh
	DEFB 50h
	DEFB 6Ch
	DEFB 61h
	DEFB 79h
	DEFB 20h
	DEFB 28h
	DEFB 50h
	DEFB 29h
	DEFB 2Ch
	DEFB 20h
	DEFB 49h
	DEFB 6Eh
	DEFB 73h
	DEFB 74h
	DEFB 72h
	DEFB 75h
	DEFB 63h
	DEFB 74h
	DEFB 69h
	DEFB 6Fh
	DEFB 6Eh
	DEFB 73h
	DEFB 20h
	DEFB 28h
	DEFB 49h
	DEFB 29h
	DEFB 20h
	DEFB 6Fh
	DEFB 72h
__LABEL80:
	DEFW 0008h
	DEFB 51h
	DEFB 75h
	DEFB 69h
	DEFB 74h
	DEFB 20h
	DEFB 28h
	DEFB 51h
	DEFB 29h
__LABEL86:
	DEFW 001Fh
	DEFB 4Dh
	DEFB 6Fh
	DEFB 76h
	DEFB 65h
	DEFB 20h
	DEFB 73h
	DEFB 6Eh
	DEFB 61h
	DEFB 6Bh
	DEFB 65h
	DEFB 20h
	DEFB 77h
	DEFB 69h
	DEFB 74h
	DEFB 68h
	DEFB 20h
	DEFB 74h
	DEFB 68h
	DEFB 65h
	DEFB 20h
	DEFB 43h
	DEFB 55h
	DEFB 52h
	DEFB 53h
	DEFB 4Fh
	DEFB 52h
	DEFB 20h
	DEFB 6Bh
	DEFB 65h
	DEFB 79h
	DEFB 73h
__LABEL87:
	DEFW 001Fh
	DEFB 61h
	DEFB 6Eh
	DEFB 64h
	DEFB 20h
	DEFB 6Dh
	DEFB 75h
	DEFB 6Eh
	DEFB 63h
	DEFB 68h
	DEFB 20h
	DEFB 74h
	DEFB 68h
	DEFB 65h
	DEFB 20h
	DEFB 64h
	DEFB 6Fh
	DEFB 74h
	DEFB 73h
	DEFB 20h
	DEFB 69h
	DEFB 6Eh
	DEFB 20h
	DEFB 74h
	DEFB 68h
	DEFB 65h
	DEFB 20h
	DEFB 66h
	DEFB 69h
	DEFB 65h
	DEFB 6Ch
	DEFB 64h
__LABEL88:
	DEFW 001Dh
	DEFB 54h
	DEFB 72h
	DEFB 79h
	DEFB 20h
	DEFB 74h
	DEFB 6Fh
	DEFB 20h
	DEFB 61h
	DEFB 76h
	DEFB 6Fh
	DEFB 69h
	DEFB 64h
	DEFB 20h
	DEFB 61h
	DEFB 20h
	DEFB 63h
	DEFB 72h
	DEFB 61h
	DEFB 73h
	DEFB 68h
	DEFB 20h
	DEFB 77h
	DEFB 69h
	DEFB 74h
	DEFB 68h
	DEFB 20h
	DEFB 74h
	DEFB 68h
	DEFB 65h
__LABEL89:
	DEFW 0011h
	DEFB 62h
	DEFB 6Fh
	DEFB 64h
	DEFB 79h
	DEFB 20h
	DEFB 6Fh
	DEFB 66h
	DEFB 20h
	DEFB 74h
	DEFB 68h
	DEFB 65h
	DEFB 20h
	DEFB 73h
	DEFB 6Eh
	DEFB 61h
	DEFB 6Bh
	DEFB 65h
__LABEL90:
	DEFW 001Eh
	DEFB 57h
	DEFB 68h
	DEFB 65h
	DEFB 6Eh
	DEFB 20h
	DEFB 79h
	DEFB 6Fh
	DEFB 75h
	DEFB 20h
	DEFB 63h
	DEFB 6Fh
	DEFB 6Dh
	DEFB 65h
	DEFB 20h
	DEFB 66h
	DEFB 75h
	DEFB 72h
	DEFB 74h
	DEFB 68h
	DEFB 65h
	DEFB 72h
	DEFB 20h
	DEFB 69h
	DEFB 6Eh
	DEFB 74h
	DEFB 6Fh
	DEFB 20h
	DEFB 74h
	DEFB 68h
	DEFB 65h
__LABEL91:
	DEFW 001Ch
	DEFB 67h
	DEFB 61h
	DEFB 6Dh
	DEFB 65h
	DEFB 20h
	DEFB 74h
	DEFB 68h
	DEFB 65h
	DEFB 20h
	DEFB 73h
	DEFB 6Eh
	DEFB 61h
	DEFB 6Bh
	DEFB 65h
	DEFB 20h
	DEFB 73h
	DEFB 74h
	DEFB 61h
	DEFB 72h
	DEFB 74h
	DEFB 73h
	DEFB 20h
	DEFB 6Ch
	DEFB 6Fh
	DEFB 6Eh
	DEFB 67h
	DEFB 65h
	DEFB 72h
__LABEL92:
	DEFW 000Fh
	DEFB 77h
	DEFB 68h
	DEFB 69h
	DEFB 6Ch
	DEFB 65h
	DEFB 20h
	DEFB 79h
	DEFB 6Fh
	DEFB 75h
	DEFB 72h
	DEFB 20h
	DEFB 74h
	DEFB 69h
	DEFB 6Dh
	DEFB 65h
__LABEL93:
	DEFW 0007h
	DEFB 69h
	DEFB 73h
	DEFB 20h
	DEFB 6Ch
	DEFB 65h
	DEFB 73h
	DEFB 73h
__LABEL94:
	DEFW 000Ah
	DEFB 47h
	DEFB 6Fh
	DEFB 6Fh
	DEFB 64h
	DEFB 20h
	DEFB 6Ch
	DEFB 75h
	DEFB 63h
	DEFB 6Bh
	DEFB 21h
__LABEL100:
	DEFW 001Fh
	DEFB 20h
	DEFB 90h
	DEFB 20h
	DEFB 90h
	DEFB 20h
	DEFB 90h
	DEFB 20h
	DEFB 90h
	DEFB 20h
	DEFB 90h
	DEFB 20h
	DEFB 90h
	DEFB 20h
	DEFB 90h
	DEFB 20h
	DEFB 90h
	DEFB 20h
	DEFB 90h
	DEFB 20h
	DEFB 90h
	DEFB 20h
	DEFB 90h
	DEFB 20h
	DEFB 90h
	DEFB 20h
	DEFB 90h
	DEFB 20h
	DEFB 90h
	DEFB 20h
	DEFB 90h
	DEFB 20h
__LABEL117:
	DEFW 0007h
	DEFB 54h
	DEFB 69h
	DEFB 6Dh
	DEFB 65h
	DEFB 3Eh
	DEFB 20h
	DEFB 20h
__LABEL118:
	DEFW 0007h
	DEFB 4Ch
	DEFB 65h
	DEFB 76h
	DEFB 65h
	DEFB 6Ch
	DEFB 3Eh
	DEFB 20h
__LABEL119:
	DEFW 0007h
	DEFB 53h
	DEFB 63h
	DEFB 6Fh
	DEFB 72h
	DEFB 65h
	DEFB 3Eh
	DEFB 20h
__LABEL120:
	DEFW 0007h
	DEFB 4Ch
	DEFB 69h
	DEFB 76h
	DEFB 65h
	DEFB 73h
	DEFB 3Eh
	DEFB 20h
#line 1 "alloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the MIT license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the MIT license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be freed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.

#line 1 "error.asm"

	; Simple error control routines
; vim:ts=4:et:

	ERR_NR    EQU    23610    ; Error code system variable


	; Error code definitions (as in ZX spectrum manual)

; Set error code with:
	;    ld a, ERROR_CODE
	;    ld (ERR_NR), a


	ERROR_Ok                EQU    -1
	ERROR_SubscriptWrong    EQU     2
	ERROR_OutOfMemory       EQU     3
	ERROR_OutOfScreen       EQU     4
	ERROR_NumberTooBig      EQU     5
	ERROR_InvalidArg        EQU     9
	ERROR_IntOutOfRange     EQU    10
	ERROR_NonsenseInBasic   EQU    11
	ERROR_InvalidFileName   EQU    14
	ERROR_InvalidColour     EQU    19
	ERROR_BreakIntoProgram  EQU    20
	ERROR_TapeLoadingErr    EQU    26


	; Raises error using RST #8
__ERROR:
	    ld (__ERROR_CODE), a
	    rst 8
__ERROR_CODE:
	    nop
	    ret

	; Sets the error system variable, but keeps running.
	; Usually this instruction if followed by the END intermediate instruction.
__STOP:
	    ld (ERR_NR), a
	    ret
#line 69 "alloc.asm"
#line 1 "heapinit.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.




	; ---------------------------------------------------------------------
	;  __MEM_INIT must be called to initalize this library with the
	; standard parameters
	; ---------------------------------------------------------------------
__MEM_INIT: ; Initializes the library using (RAMTOP) as start, and
	        ld hl, ZXBASIC_MEM_HEAP  ; Change this with other address of heap start
	        ld de, ZXBASIC_HEAP_SIZE ; Change this with your size

	; ---------------------------------------------------------------------
	;  __MEM_INIT2 initalizes this library
; Parameters:
;   HL : Memory address of 1st byte of the memory heap
;   DE : Length in bytes of the Memory Heap
	; ---------------------------------------------------------------------
__MEM_INIT2:
	        ; HL as TOP
	        PROC

	        dec de
	        dec de
	        dec de
	        dec de        ; DE = length - 4; HL = start
	        ; This is done, because we require 4 bytes for the empty dummy-header block

	        xor a
	        ld (hl), a
	        inc hl
        ld (hl), a ; First "free" block is a header: size=0, Pointer=&(Block) + 4
	        inc hl

	        ld b, h
	        ld c, l
	        inc bc
	        inc bc      ; BC = starts of next block

	        ld (hl), c
	        inc hl
	        ld (hl), b
	        inc hl      ; Pointer to next block

	        ld (hl), e
	        inc hl
	        ld (hl), d
	        inc hl      ; Block size (should be length - 4 at start); This block contains all the available memory

	        ld (hl), a ; NULL (0000h) ; No more blocks (a list with a single block)
	        inc hl
	        ld (hl), a

	        ld a, 201
	        ld (__MEM_INIT), a; "Pokes" with a RET so ensure this routine is not called again
	        ret

	        ENDP

#line 70 "alloc.asm"


	; ---------------------------------------------------------------------
	; MEM_ALLOC
	;  Allocates a block of memory in the heap.
	;
	; Parameters
	;  BC = Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	; ---------------------------------------------------------------------

MEM_ALLOC:
__MEM_ALLOC: ; Returns the 1st free block found of the given length (in BC)
	        PROC

	        LOCAL __MEM_LOOP
	        LOCAL __MEM_DONE
	        LOCAL __MEM_SUBTRACT
	        LOCAL __MEM_START
	        LOCAL TEMP, TEMP0

	TEMP EQU TEMP0 + 1

	        ld hl, 0
	        ld (TEMP), hl

__MEM_START:
	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start
	        inc bc
	        inc bc  ; BC = BC + 2 ; block size needs 2 extra bytes for hidden pointer

__MEM_LOOP:  ; Loads lengh at (HL, HL+). If Lenght >= BC, jump to __MEM_DONE
	        ld a, h ;  HL = NULL (No memory available?)
	        or l
#line 111 "D:/zxbasic/library-asm/alloc.asm"
	        ret z ; NULL
#line 113 "D:/zxbasic/library-asm/alloc.asm"
	        ; HL = Pointer to Free block
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        inc hl          ; DE = Block Length

	        push hl         ; HL = *pointer to -> next block
	        ex de, hl
	        or a            ; CF = 0
	        sbc hl, bc      ; FREE >= BC (Length)  (HL = BlockLength - Length)
	        jp nc, __MEM_DONE
	        pop hl
	        ld (TEMP), hl

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        ex de, hl
	        jp __MEM_LOOP

__MEM_DONE:  ; A free block has been found.
	             ; Check if at least 4 bytes remains free (HL >= 4)
	        push hl
	        exx  ; exx to preserve bc
	        pop hl
	        ld bc, 4
	        or a
	        sbc hl, bc
	        exx
	        jp nc, __MEM_SUBTRACT
	        ; At this point...
	        ; less than 4 bytes remains free. So we return this block entirely
	        ; We must link the previous block with the next to this one
	        ; (DE) => Pointer to next block
	        ; (TEMP) => &(previous->next)
	        pop hl     ; Discard current block pointer
	        push de
	        ex de, hl  ; DE = Previous block pointer; (HL) = Next block pointer
	        ld a, (hl)
	        inc hl
	        ld h, (hl)
	        ld l, a    ; HL = (HL)
	        ex de, hl  ; HL = Previous block pointer; DE = Next block pointer
TEMP0:
	        ld hl, 0   ; Pre-previous block pointer

	        ld (hl), e
	        inc hl
	        ld (hl), d ; LINKED
	        pop hl ; Returning block.

	        ret

__MEM_SUBTRACT:
	        ; At this point we have to store HL value (Length - BC) into (DE - 2)
	        ex de, hl
	        dec hl
	        ld (hl), d
	        dec hl
	        ld (hl), e ; Store new block length

	        add hl, de ; New length + DE => free-block start
	        pop de     ; Remove previous HL off the stack

	        ld (hl), c ; Store length on its 1st word
	        inc hl
	        ld (hl), b
	        inc hl     ; Return hl
	        ret

	        ENDP

#line 3492 "snaker2021.zxbas"
#line 1 "array.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	; -------------------------------------------------------------------
	; Simple array Index routine
	; Number of total indexes dimensions - 1 at beginning of memory
	; HL = Start of array memory (First two bytes contains N-1 dimensions)
	; Dimension values on the stack, (top of the stack, highest dimension)
	; E.g. A(2, 4) -> PUSH <4>; PUSH <2>

	; For any array of N dimension A(aN-1, ..., a1, a0)
	; and dimensions D[bN-1, ..., b1, b0], the offset is calculated as
	; O = [a0 + b0 * (a1 + b1 * (a2 + ... bN-2(aN-1)))]
; What I will do here is to calculate the following sequence:
	; ((aN-1 * bN-2) + aN-2) * bN-3 + ...


#line 1 "mul16.asm"

__MUL16:	; Mutiplies HL with the last value stored into de stack
				; Works for both signed and unsigned

			PROC

			LOCAL __MUL16LOOP
	        LOCAL __MUL16NOADD

			ex de, hl
			pop hl		; Return address
			ex (sp), hl ; CALLEE caller convention

__MUL16_FAST:
	        ld b, 16
	        ld a, h
	        ld c, l
	        ld hl, 0

__MUL16LOOP:
	        add hl, hl  ; hl << 1
	        sla c
	        rla         ; a,c << 1
	        jp nc, __MUL16NOADD
	        add hl, de

__MUL16NOADD:
	        djnz __MUL16LOOP

			ret	; Result in hl (16 lower bits)

			ENDP

#line 20 "array.asm"

#line 24 "D:/zxbasic/library-asm/array.asm"

__ARRAY_PTR:   ;; computes an array offset from a pointer
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c

__ARRAY:
		PROC

		LOCAL LOOP
		LOCAL ARRAY_END
		LOCAL RET_ADDRESS ; Stores return address
		LOCAL TMP_ARR_PTR ; Stores pointer temporarily

	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    inc hl
	    ld (TMP_ARR_PTR), hl
	    ex de, hl
		ex (sp), hl	; Return address in HL, array address in the stack
		ld (RET_ADDRESS + 1), hl ; Stores it for later

		exx
		pop hl		; Will use H'L' as the pointer
		ld c, (hl)	; Loads Number of dimensions from (hl)
		inc hl
		ld b, (hl)
		inc hl		; Ready
		exx

		ld hl, 0	; HL = Offset "accumulator"

LOOP:
#line 62 "D:/zxbasic/library-asm/array.asm"
		pop bc		; Get next index (Ai) from the stack

#line 72 "D:/zxbasic/library-asm/array.asm"

		add hl, bc	; Adds current index

		exx			; Checks if B'C' = 0
		ld a, b		; Which means we must exit (last element is not multiplied by anything)
		or c
		jr z, ARRAY_END		; if B'Ci == 0 we are done

		ld e, (hl)			; Loads next dimension into D'E'
		inc hl
		ld d, (hl)
		inc hl
		push de
		dec bc				; Decrements loop counter
		exx
		pop de				; DE = Max bound Number (i-th dimension)

	    call __FNMUL
		jp LOOP

ARRAY_END:
		ld a, (hl)
		exx

#line 101 "D:/zxbasic/library-asm/array.asm"
	    LOCAL ARRAY_SIZE_LOOP

	    ex de, hl
	    ld hl, 0
	    ld b, a
ARRAY_SIZE_LOOP:
	    add hl, de
	    djnz ARRAY_SIZE_LOOP

#line 111 "D:/zxbasic/library-asm/array.asm"

	    ex de, hl
		ld hl, (TMP_ARR_PTR)
		ld a, (hl)
		inc hl
		ld h, (hl)
		ld l, a
		add hl, de  ; Adds element start

RET_ADDRESS:
		jp 0

	    ;; Performs a faster multiply for little 16bit numbs
	    LOCAL __FNMUL, __FNMUL2

__FNMUL:
	    xor a
	    or h
	    jp nz, __MUL16_FAST
	    or l
	    ret z

	    cp 33
	    jp nc, __MUL16_FAST

	    ld b, l
	    ld l, h  ; HL = 0

__FNMUL2:
	    add hl, de
	    djnz __FNMUL2
	    ret

TMP_ARR_PTR:
	    DW 0  ; temporary storage for pointer to tables

		ENDP

#line 3493 "snaker2021.zxbas"
#line 1 "arrayalloc.asm"


#line 1 "calloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the MIT license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the MIT license on the internet




	; ---------------------------------------------------------------------
	; MEM_CALLOC
	;  Allocates a block of memory in the heap, and clears it filling it
	;  with 0 bytes
	;
	; Parameters
	;  BC = Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	; ---------------------------------------------------------------------
__MEM_CALLOC:
	        push bc
	        call __MEM_ALLOC
	        pop bc
	        ld a, h
	        or l
	        ret z  ; No memory
	        ld (hl), 0
	        dec bc
	        ld a, b
	        or c
	        ret z  ; Already filled (1 byte-length block)
	        ld d, h
	        ld e, l
	        inc de
	        push hl
	        ldir
	        pop hl
	        ret
#line 3 "arrayalloc.asm"


	; ---------------------------------------------------------------------
	; __ALLOC_LOCAL_ARRAY
	;  Allocates an array element area in the heap, and clears it filling it
	;  with 0 bytes
	;
	; Parameters
	;  HL = Offset to be added to IX => HL = IX + HL
	;  BC = Length of the element area = n.elements * size(element)
	;  DE = PTR to the index table
	;
; Returns:
	;  HL = (IX + HL) + 4
	; ---------------------------------------------------------------------

__ALLOC_LOCAL_ARRAY:
	    push de
	    push ix
	    pop de
	    add hl, de  ; hl = ix + hl
	    pop de
	    ld (hl), e
	    inc hl
	    ld (hl), d
	    inc hl
	    push hl
	    call __MEM_CALLOC
	    pop de
	    ex de, hl
	    ld (hl), e
	    inc hl
	    ld (hl), d
	    ret


	; ---------------------------------------------------------------------
	; __ALLOC_INITIALIZED_LOCAL_ARRAY
	;  Allocates an array element area in the heap, and clears it filling it
	;  with 0 bytes
	;
	; Parameters
	;  HL = Offset to be added to IX => HL = IX + HL
	;  BC = Length of the element area = n.elements * size(element)
	;  DE = PTR to the index table
	;  TOP of the stack = PTR to the element area
; Returns:
	;  Nothing
	; ---------------------------------------------------------------------

__ALLOC_INITIALIZED_LOCAL_ARRAY:
	    push bc
	    call __ALLOC_LOCAL_ARRAY
	    pop bc
	    pop hl
	    ex (sp), hl
	    ; HL = data table
	    ; BC = length
	    ; DE = new data area
	    ldir
	    ret
#line 3494 "snaker2021.zxbas"
#line 1 "arraystrfree.asm"

	; This routine is in charge of freeing an array of strings from memory
	; HL = Pointer to start of array in memory
	; Top of the stack = Number of elements of the array

#line 1 "free.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.



	; ---------------------------------------------------------------------
	; MEM_FREE
	;  Frees a block of memory
	;
; Parameters:
	;  HL = Pointer to the block to be freed. If HL is NULL (0) nothing
	;  is done
	; ---------------------------------------------------------------------

MEM_FREE:
__MEM_FREE: ; Frees the block pointed by HL
	            ; HL DE BC & AF modified
	        PROC

	        LOCAL __MEM_LOOP2
	        LOCAL __MEM_LINK_PREV
	        LOCAL __MEM_JOIN_TEST
	        LOCAL __MEM_BLOCK_JOIN

	        ld a, h
	        or l
	        ret z       ; Return if NULL pointer

	        dec hl
	        dec hl
	        ld b, h
	        ld c, l    ; BC = Block pointer

	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start

__MEM_LOOP2:
	        inc hl
	        inc hl     ; Next block ptr

	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; Block next ptr
	        ex de, hl  ; DE = &(block->next); HL = block->next

	        ld a, h    ; HL == NULL?
	        or l
	        jp z, __MEM_LINK_PREV; if so, link with previous

	        or a       ; Clear carry flag
	        sbc hl, bc ; Carry if BC > HL => This block if before
	        add hl, bc ; Restores HL, preserving Carry flag
	        jp c, __MEM_LOOP2 ; This block is before. Keep searching PASS the block

	;------ At this point current HL is PAST BC, so we must link (DE) with BC, and HL in BC->next

__MEM_LINK_PREV:    ; Link (DE) with BC, and BC->next with HL
	        ex de, hl
	        push hl
	        dec hl

	        ld (hl), c
	        inc hl
	        ld (hl), b ; (DE) <- BC

	        ld h, b    ; HL <- BC (Free block ptr)
	        ld l, c
	        inc hl     ; Skip block length (2 bytes)
	        inc hl
	        ld (hl), e ; Block->next = DE
	        inc hl
	        ld (hl), d
	        ; --- LINKED ; HL = &(BC->next) + 2

	        call __MEM_JOIN_TEST
	        pop hl

__MEM_JOIN_TEST:   ; Checks for fragmented contiguous blocks and joins them
	                   ; hl = Ptr to current block + 2
	        ld d, (hl)
	        dec hl
	        ld e, (hl)
	        dec hl
	        ld b, (hl) ; Loads block length into BC
	        dec hl
	        ld c, (hl) ;

	        push hl    ; Saves it for later
	        add hl, bc ; Adds its length. If HL == DE now, it must be joined
	        or a
	        sbc hl, de ; If Z, then HL == DE => We must join
	        pop hl
	        ret nz

__MEM_BLOCK_JOIN:  ; Joins current block (pointed by HL) with next one (pointed by DE). HL->length already in BC
	        push hl    ; Saves it for later
	        ex de, hl

	        ld e, (hl) ; DE -> block->next->length
	        inc hl
	        ld d, (hl)
	        inc hl

	        ex de, hl  ; DE = &(block->next)
	        add hl, bc ; HL = Total Length

	        ld b, h
	        ld c, l    ; BC = Total Length

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; DE = block->next

	        pop hl     ; Recovers Pointer to block
	        ld (hl), c
	        inc hl
	        ld (hl), b ; Length Saved
	        inc hl
	        ld (hl), e
	        inc hl
	        ld (hl), d ; Next saved
	        ret

	        ENDP

#line 6 "arraystrfree.asm"

__ARRAYSTR_FREE:
		PROC

		LOCAL __ARRAY_LOOP

		ex de, hl
		pop hl		; (ret address)
		ex (sp), hl	; Callee -> HL = Number of elements

		ex de, hl

__ARRAYSTR_FREE_FAST:	; Fastcall entry: DE = Number of elements
		ld a, h
		or l
		ret z		; ret if NULL

		ld b, d
		ld c, e

__ARRAY_LOOP:
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl		; DE = (HL) = String Pointer

		push hl
		push bc
		ex de, hl
		call __MEM_FREE ; Frees it from memory
		pop bc
		pop hl

		dec bc
		ld a, b
		or c
		jp nz, __ARRAY_LOOP

		ret		    ; Frees it and return

		ENDP


__ARRAYSTR_FREE_MEM: ; like the above, buf also frees the array itself
		ex de, hl
		pop hl		; (ret address)
		ex (sp), hl	; Callee -> HL = Number of elements
		ex de, hl

		push hl		; Saves array pointer for later
		call __ARRAYSTR_FREE_FAST
		pop hl		; recovers array block pointer

		jp __MEM_FREE	; Frees it and returns from __MEM_FREE

#line 3495 "snaker2021.zxbas"
#line 1 "border.asm"

	; __FASTCALL__ Routine to change de border
	; Parameter (color) specified in A register

	BORDER EQU 229Bh

	; Nothing to do! (Directly from the ZX Spectrum ROM)

#line 3496 "snaker2021.zxbas"
#line 1 "bright.asm"

	; Sets bright flag in ATTR_P permanently
; Parameter: Paper color in A register

#line 1 "const.asm"

	; Global constants

	P_FLAG	EQU 23697
	FLAGS2	EQU 23681
	ATTR_P	EQU 23693	; permanet ATTRIBUTES
	ATTR_T	EQU 23695	; temporary ATTRIBUTES
	CHARS	EQU 23606 ; Pointer to ROM/RAM Charset
	UDG	EQU 23675 ; Pointer to UDG Charset
	MEM0	EQU 5C92h ; Temporary memory buffer used by ROM chars

#line 5 "bright.asm"

BRIGHT:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_BRIGHT:
		; Another entry. This will set the bright flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x40

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 0BFh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 6, (hl)  ;Reset bit 6 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
	    set 6, (hl)  ;Set bit 6 to enable transparency
		ret

	; Sets the BRIGHT flag passed in A register in the ATTR_T variable
BRIGHT_TMP:
		ld hl, ATTR_T
		jr __SET_BRIGHT
	    ENDP
#line 3497 "snaker2021.zxbas"
#line 1 "chr.asm"

	; CHR$(x, y, x) returns the string CHR$(x) + CHR$(y) + CHR$(z)
	;



CHR:	; Returns HL = Pointer to STRING (NULL if no memory)
			; Requires alloc.asm for dynamic memory heap.
		; Parameters: HL = Number of bytes to insert (already push onto the stack)
			; STACK => parameters (16 bit, only the High byte is considered)
			; Used registers A, A', BC, DE, HL, H'L'

			PROC

			LOCAL __POPOUT
			LOCAL TMP

	TMP		EQU 23629 ; (DEST System variable)

			ld a, h
			or l
			ret z	; If Number of parameters is ZERO, return NULL STRING

			ld b, h
			ld c, l

			pop hl	; Return address
			ld (TMP), hl

			push bc
			inc bc
			inc bc	; BC = BC + 2 => (2 bytes for the length number)
			call __MEM_ALLOC
			pop bc

			ld d, h
			ld e, l			; Saves HL in DE

			ld a, h
			or l
			jr z, __POPOUT	; No Memory, return

			ld (hl), c
			inc hl
			ld (hl), b
			inc hl

__POPOUT:	; Removes out of the stack every byte and return
				; If Zero Flag is set, don't store bytes in memory
			ex af, af' ; Save Zero Flag

			ld a, b
			or c
			jr z, __CHR_END

			dec bc
			pop af 	   ; Next byte

			ex af, af' ; Recovers Zero flag
			jr z, __POPOUT

			ex af, af' ; Saves Zero flag
			ld (hl), a
			inc hl
	        ex af, af' ; Recovers Zero Flag

			jp __POPOUT

__CHR_END:
			ld hl, (TMP)
			push hl		; Restores return addr
			ex de, hl	; Recovers original HL ptr
			ret

			ENDP

#line 3498 "snaker2021.zxbas"
#line 1 "cls.asm"

	; JUMPS directly to spectrum CLS
	; This routine does not clear lower screen

	;CLS	EQU	0DAFh

	; Our faster implementation

#line 1 "sposn.asm"

	; Printing positioning library.
			PROC
			LOCAL ECHO_E

__LOAD_S_POSN:		; Loads into DE current ROW, COL print position from S_POSN mem var.
			ld de, (S_POSN)
			ld hl, (MAXX)
			or a
			sbc hl, de
			ex de, hl
			ret


__SAVE_S_POSN:		; Saves ROW, COL from DE into S_POSN mem var.
			ld hl, (MAXX)
			or a
			sbc hl, de
			ld (S_POSN), hl ; saves it again
			ret


	ECHO_E	EQU 23682
	MAXX	EQU ECHO_E   ; Max X position + 1
	MAXY	EQU MAXX + 1 ; Max Y position + 1

	S_POSN	EQU 23688
	POSX	EQU S_POSN		; Current POS X
	POSY	EQU S_POSN + 1	; Current POS Y

			ENDP

#line 9 "cls.asm"

CLS:
		PROC

		LOCAL COORDS
		LOCAL __CLS_SCR
		LOCAL ATTR_P
		LOCAL SCREEN

		ld hl, 0
		ld (COORDS), hl
	    ld hl, 1821h
		ld (S_POSN), hl
__CLS_SCR:
		ld hl, SCREEN
		ld (hl), 0
		ld d, h
		ld e, l
		inc de
		ld bc, 6144
		ldir

		; Now clear attributes

		ld a, (ATTR_P)
		ld (hl), a
		ld bc, 767
		ldir
		ret

	COORDS	EQU	23677
	SCREEN	EQU 16384 ; Default start of the screen (can be changed)
	ATTR_P	EQU 23693
	;you can poke (SCREEN_SCRADDR) to change CLS, DRAW & PRINTing address

	SCREEN_ADDR EQU (__CLS_SCR + 1) ; Address used by print and other screen routines
								    ; to get the start of the screen
		ENDP

#line 3499 "snaker2021.zxbas"
#line 1 "copy_attr.asm"


#line 1 "print.asm"

; vim:ts=4:sw=4:et:
; vim:ts=4:sw=4:et:
	; PRINT command routine
	; Does not print attribute. Use PRINT_STR or PRINT_NUM for that



#line 1 "in_screen.asm"




__IN_SCREEN:
		; Returns NO carry if current coords (D, E)
		; are OUT of the screen limits (MAXX, MAXY)

		PROC
		LOCAL __IN_SCREEN_ERR

		ld hl, MAXX
		ld a, e
		cp (hl)
		jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range

		ld a, d
		inc hl
		cp (hl)
		;; jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range
		;; ret
	    ret c                       ; Return if carry (OK)

__IN_SCREEN_ERR:
__OUT_OF_SCREEN_ERR:
		; Jumps here if out of screen
		ld a, ERROR_OutOfScreen
	    jp __STOP   ; Saves error code and exits

		ENDP
#line 9 "print.asm"
#line 1 "table_jump.asm"


JUMP_HL_PLUS_2A: ; Does JP (HL + A*2) Modifies DE. Modifies A
		add a, a

JUMP_HL_PLUS_A:	 ; Does JP (HL + A) Modifies DE
		ld e, a
		ld d, 0

JUMP_HL_PLUS_DE: ; Does JP (HL + DE)
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		ex de, hl
CALL_HL:
		jp (hl)

#line 10 "print.asm"
#line 1 "ink.asm"

	; Sets ink color in ATTR_P permanently
; Parameter: Paper color in A register



INK:
		PROC
		LOCAL __SET_INK
		LOCAL __SET_INK2

		ld de, ATTR_P

__SET_INK:
		cp 8
		jr nz, __SET_INK2

		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		or 7 ; Set bits 0,1,2 to enable transparency
		ld (de), a
		ret

__SET_INK2:
		; Another entry. This will set the ink color at location pointer by DE
		and 7	; # Gets color mod 8
		ld b, a	; Saves the color
		ld a, (de)
		and 0F8h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		and 0F8h ; Reset bits 0,1,2 sign to disable transparency
		ld (de), a ; Store new attr
		ret

	; Sets the INK color passed in A register in the ATTR_T variable
INK_TMP:
		ld de, ATTR_T
		jp __SET_INK

		ENDP

#line 11 "print.asm"
#line 1 "paper.asm"

	; Sets paper color in ATTR_P permanently
; Parameter: Paper color in A register



PAPER:
		PROC
		LOCAL __SET_PAPER
		LOCAL __SET_PAPER2

		ld de, ATTR_P

__SET_PAPER:
		cp 8
		jr nz, __SET_PAPER2
		inc de
		ld a, (de)
		or 038h
		ld (de), a
		ret

		; Another entry. This will set the paper color at location pointer by DE
__SET_PAPER2:
		and 7	; # Remove
		rlca
		rlca
		rlca		; a *= 8

		ld b, a	; Saves the color
		ld a, (de)
		and 0C7h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points to MASK_T or MASK_P accordingly
		ld a, (de)
		and 0C7h  ; Resets bits 3,4,5
		ld (de), a
		ret


	; Sets the PAPER color passed in A register in the ATTR_T variable
PAPER_TMP:
		ld de, ATTR_T
		jp __SET_PAPER
		ENDP

#line 12 "print.asm"
#line 1 "flash.asm"

	; Sets flash flag in ATTR_P permanently
; Parameter: Paper color in A register



FLASH:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_FLASH:
		; Another entry. This will set the flash flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x80

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 07Fh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 7, (hl)  ;Reset bit 7 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
		set 7, (hl)  ;Set bit 7 to enable transparency
		ret

	; Sets the FLASH flag passed in A register in the ATTR_T variable
FLASH_TMP:
		ld hl, ATTR_T
		jr __SET_FLASH
	    ENDP

#line 13 "print.asm"

#line 1 "over.asm"

	; Sets OVER flag in P_FLAG permanently
; Parameter: OVER flag in bit 0 of A register



OVER:
		PROC

		ld c, a ; saves it for later
		and 2
		ld hl, FLAGS2
		res 1, (HL)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1	; # Convert to 0/1
		add a, a; # Shift left 1 bit for permanent

		ld hl, P_FLAG
		res 1, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets OVER flag in P_FLAG temporarily
OVER_TMP:
		ld c, a ; saves it for later
		and 2	; gets bit 1; clears carry
		rra
		ld hl, FLAGS2
		res 0, (hl)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1
		ld hl, P_FLAG
		res 0, (hl)
	    or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 15 "print.asm"
#line 1 "inverse.asm"

	; Sets INVERSE flag in P_FLAG permanently
; Parameter: INVERSE flag in bit 0 of A register



INVERSE:
		PROC

		and 1	; # Convert to 0/1
		add a, a; # Shift left 3 bits for permanent
		add a, a
		add a, a
		ld hl, P_FLAG
		res 3, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets INVERSE flag in P_FLAG temporarily
INVERSE_TMP:
		and 1
		add a, a
		add a, a; # Shift left 2 bits for temporary
		ld hl, P_FLAG
		res 2, (hl)
		or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 16 "print.asm"
#line 1 "bold.asm"

	; Sets BOLD flag in P_FLAG permanently
; Parameter: BOLD flag in bit 0 of A register


BOLD:
		PROC

		and 1
		rlca
	    rlca
	    rlca
		ld hl, FLAGS2
		res 3, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets BOLD flag in P_FLAG temporarily
BOLD_TMP:
		and 1
		rlca
		rlca
		ld hl, FLAGS2
		res 2, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 17 "print.asm"
#line 1 "italic.asm"

	; Sets ITALIC flag in P_FLAG permanently
; Parameter: ITALIC flag in bit 0 of A register


ITALIC:
		PROC

		and 1
	    rrca
	    rrca
	    rrca
		ld hl, FLAGS2
		res 5, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets ITALIC flag in P_FLAG temporarily
ITALIC_TMP:
		and 1
		rrca
		rrca
		rrca
		rrca
		ld hl, FLAGS2
		res 4, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 18 "print.asm"

#line 1 "attr.asm"

	; Attribute routines
; vim:ts=4:et:sw:







__ATTR_ADDR:
	    ; calc start address in DE (as (32 * d) + e)
    ; Contributed by Santiago Romero at http://www.speccy.org
	    ld h, 0                     ;  7 T-States
	    ld a, d                     ;  4 T-States
	    add a, a     ; a * 2        ;  4 T-States
	    add a, a     ; a * 4        ;  4 T-States
	    ld l, a      ; HL = A * 4   ;  4 T-States

	    add hl, hl   ; HL = A * 8   ; 15 T-States
	    add hl, hl   ; HL = A * 16  ; 15 T-States
	    add hl, hl   ; HL = A * 32  ; 15 T-States

    ld d, 18h ; DE = 6144 + E. Note: 6144 is the screen size (before attr zone)
	    add hl, de

	    ld de, (SCREEN_ADDR)    ; Adds the screen address
	    add hl, de

	    ; Return current screen address in HL
	    ret


	; Sets the attribute at a given screen coordinate (D, E).
	; The attribute is taken from the ATTR_T memory variable
	; Used by PRINT routines
SET_ATTR:

	    ; Checks for valid coords
	    call __IN_SCREEN
	    ret nc

__SET_ATTR:
	    ; Internal __FASTCALL__ Entry used by printing routines
	    PROC

	    call __ATTR_ADDR

__SET_ATTR2:  ; Sets attr from ATTR_T to (HL) which points to the scr address
	    ld de, (ATTR_T)    ; E = ATTR_T, D = MASK_T

	    ld a, d
	    and (hl)
	    ld c, a    ; C = current screen color, masked

	    ld a, d
	    cpl        ; Negate mask
	    and e    ; Mask current attributes
	    or c    ; Mix them
	    ld (hl), a ; Store result in screen

	    ret

	    ENDP


	; Sets the attribute at a given screen pixel address in hl
	; HL contains the address in RAM for a given pixel (not a coordinate)
SET_PIXEL_ADDR_ATTR:
	    ;; gets ATTR position with offset given in SCREEN_ADDR
	    ld a, h
	    rrca
	    rrca
	    rrca
	    and 3
	    or 18h
	    ld h, a
	    ld de, (SCREEN_ADDR)
	    add hl, de  ;; Final screen addr
	    jp __SET_ATTR2
#line 20 "print.asm"

	; Putting a comment starting with @INIT <address>
	; will make the compiler to add a CALL to <address>
	; It is useful for initialization routines.


__PRINT_INIT: ; To be called before program starts (initializes library)
	        PROC

	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl

	        ld hl, 1821h
	        ld (MAXX), hl  ; Sets current maxX and maxY

	        xor a
	        ld (FLAGS2), a

	        ret


__PRINTCHAR: ; Print character store in accumulator (A register)
	             ; Modifies H'L', B'C', A'F', D'E', A

	        LOCAL PO_GR_1

	        LOCAL __PRCHAR
	        LOCAL __PRINT_CONT
	        LOCAL __PRINT_CONT2
	        LOCAL __PRINT_JUMP
	        LOCAL __SRCADDR
	        LOCAL __PRINT_UDG
	        LOCAL __PRGRAPH
	        LOCAL __PRINT_START
	        LOCAL __ROM_SCROLL_SCR
	        LOCAL __TVFLAGS

	        __ROM_SCROLL_SCR EQU 0DFEh
	        __TVFLAGS EQU 5C3Ch

	PRINT_JUMP_STATE EQU __PRINT_JUMP + 1

__PRINT_JUMP:
	        jp __PRINT_START    ; Where to jump. If we print 22 (AT), next two calls jumps to AT1 and AT2 respectively


	        LOCAL __SCROLL
__SCROLL:  ; Scroll?
	        ld hl, __TVFLAGS
	        bit 1, (hl)
	        ret z
	        call __ROM_SCROLL_SCR
	        ld hl, __TVFLAGS
	        res 1, (hl)
	        ret
#line 76 "D:/zxbasic/library-asm/print.asm"

__PRINT_START:
	        cp ' '
	        jp c, __PRINT_SPECIAL    ; Characters below ' ' are special ones

	        exx               ; Switch to alternative registers
	        ex af, af'        ; Saves a value (char to print) for later


	        call __SCROLL
#line 87 "D:/zxbasic/library-asm/print.asm"
	        call __LOAD_S_POSN

	; At this point we have the new coord
	        ld hl, (SCREEN_ADDR)

	        ld a, d
	        ld c, a     ; Saves it for later

	        and 0F8h    ; Masks 3 lower bit ; zy
	        ld d, a

	        ld a, c     ; Recovers it
	        and 07h     ; MOD 7 ; y1
	        rrca
	        rrca
	        rrca

	        or e
	        ld e, a
	        add hl, de    ; HL = Screen address + DE
	        ex de, hl     ; DE = Screen address

	        ex af, af'

	        cp 80h    ; Is it an UDG or a ?
	        jp c, __SRCADDR

	        cp 90h
	        jp nc, __PRINT_UDG

	        ; Print a 8 bit pattern (80h to 8Fh)

	        ld b, a
	        call PO_GR_1 ; This ROM routine will generate the bit pattern at MEM0
	        ld hl, MEM0
	        jp __PRGRAPH

	PO_GR_1 EQU 0B38h

__PRINT_UDG:
	        sub 90h ; Sub ASC code
	        ld bc, (UDG)
	        jp __PRGRAPH0

	__SOURCEADDR EQU (__SRCADDR + 1)    ; Address of the pointer to chars source
__SRCADDR:
	        ld bc, (CHARS)

__PRGRAPH0:
        add a, a   ; A = a * 2 (since a < 80h) ; Thanks to Metalbrain at http://foro.speccy.org
	        ld l, a
	        ld h, 0    ; HL = a * 2 (accumulator)
	        add hl, hl
	        add hl, hl ; HL = a * 8
	        add hl, bc ; HL = CHARS address

__PRGRAPH:
	        ex de, hl  ; HL = Write Address, DE = CHARS address
	        bit 2, (iy + $47)
	        call nz, __BOLD
	        bit 4, (iy + $47)
	        call nz, __ITALIC
	        ld b, 8 ; 8 bytes per char
__PRCHAR:
	        ld a, (de) ; DE *must* be ALWAYS source, and HL destiny

PRINT_MODE:     ; Which operation is used to write on the screen
                ; Set it with:
	                ; LD A, <OPERATION>
	                ; LD (PRINT_MODE), A
	                ;
                ; Available opertions:
                ; NORMAL : 0h  --> NOP         ; OVER 0
                ; XOR    : AEh --> XOR (HL)    ; OVER 1
                ; OR     : B6h --> OR (HL)     ; PUTSPRITE
                ; AND    : A6h --> AND (HL)    ; PUTMASK
	        nop     ;

INVERSE_MODE:   ; 00 -> NOP -> INVERSE 0
	        nop     ; 2F -> CPL -> INVERSE 1

	        ld (hl), a

	        inc de
	        inc h     ; Next line
	        djnz __PRCHAR

	        call __LOAD_S_POSN
	        push de
	        call __SET_ATTR
	        pop de
	        inc e            ; COL = COL + 1
	        ld hl, (MAXX)
	        ld a, e
	        dec l            ; l = MAXX
	        cp l            ; Lower than max?
	        jp c, __PRINT_CONT; Nothing to do
	        call __PRINT_EOL1
	        exx            ; counteracts __PRINT_EOL1 exx
	        jp __PRINT_CONT2

__PRINT_CONT:
	        call __SAVE_S_POSN

__PRINT_CONT2:
	        exx
	        ret

	; ------------- SPECIAL CHARS (< 32) -----------------

__PRINT_SPECIAL:    ; Jumps here if it is a special char
	        exx
	        ld hl, __PRINT_TABLE
	        jp JUMP_HL_PLUS_2A


PRINT_EOL:        ; Called WHENEVER there is no ";" at end of PRINT sentence
	        exx

__PRINT_0Dh:        ; Called WHEN printing CHR$(13)

	        call __SCROLL
#line 210 "D:/zxbasic/library-asm/print.asm"
	        call __LOAD_S_POSN

__PRINT_EOL1:        ; Another entry called from PRINT when next line required
	        ld e, 0

__PRINT_EOL2:
	        ld a, d
	        inc a

__PRINT_AT1_END:
	        ld hl, (MAXY)
	        cp l
	        jr c, __PRINT_EOL_END    ; Carry if (MAXY) < d

	        ld hl, __TVFLAGS
	        set 1, (hl)
	        ld a, d
#line 230 "D:/zxbasic/library-asm/print.asm"

__PRINT_EOL_END:
	        ld d, a

__PRINT_AT2_END:
	        call __SAVE_S_POSN
	        exx
	        ret

__PRINT_COM:
	        exx
	        push hl
	        push de
	        push bc
	        call PRINT_COMMA
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_TAB:
	        ld hl, __PRINT_TAB1
	        jp __PRINT_SET_STATE

__PRINT_TAB1:
	        ld (MEM0), a
	        ld hl, __PRINT_TAB2
	        ld (PRINT_JUMP_STATE), hl
	        ret

__PRINT_TAB2:
	        ld a, (MEM0)        ; Load tab code (ignore the current one)
	        push hl
	        push de
	        push bc
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl
	        call PRINT_TAB
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_NOP:
__PRINT_RESTART:
	        ld hl, __PRINT_START
	        jp __PRINT_SET_STATE

__PRINT_AT:
	        ld hl, __PRINT_AT1

__PRINT_SET_STATE:
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        exx
	        ret

__PRINT_AT1:    ; Jumps here if waiting for 1st parameter
	        exx
	        ld hl, __PRINT_AT2
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        jp __PRINT_AT1_END

__PRINT_AT2:
	        exx
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        ld e, a
	        ld hl, (MAXX)
	        cp (hl)
	        jr c, __PRINT_AT2_END
	        jr __PRINT_EOL1

__PRINT_DEL:
	        call __LOAD_S_POSN        ; Gets current screen position
	        dec e
	        ld a, -1
	        cp e
	        jp nz, __PRINT_AT2_END
	        ld hl, (MAXX)
	        ld e, l
	        dec e
	        dec e
	        dec d
	        cp d
	        jp nz, __PRINT_AT2_END
	        ld d, h
	        dec d
	        jp __PRINT_AT2_END

__PRINT_INK:
	        ld hl, __PRINT_INK2
	        jp __PRINT_SET_STATE

__PRINT_INK2:
	        exx
	        call INK_TMP
	        jp __PRINT_RESTART

__PRINT_PAP:
	        ld hl, __PRINT_PAP2
	        jp __PRINT_SET_STATE

__PRINT_PAP2:
	        exx
	        call PAPER_TMP
	        jp __PRINT_RESTART

__PRINT_FLA:
	        ld hl, __PRINT_FLA2
	        jp __PRINT_SET_STATE

__PRINT_FLA2:
	        exx
	        call FLASH_TMP
	        jp __PRINT_RESTART

__PRINT_BRI:
	        ld hl, __PRINT_BRI2
	        jp __PRINT_SET_STATE

__PRINT_BRI2:
	        exx
	        call BRIGHT_TMP
	        jp __PRINT_RESTART

__PRINT_INV:
	        ld hl, __PRINT_INV2
	        jp __PRINT_SET_STATE

__PRINT_INV2:
	        exx
	        call INVERSE_TMP
	        jp __PRINT_RESTART

__PRINT_OVR:
	        ld hl, __PRINT_OVR2
	        jp __PRINT_SET_STATE

__PRINT_OVR2:
	        exx
	        call OVER_TMP
	        jp __PRINT_RESTART

__PRINT_BOLD:
	        ld hl, __PRINT_BOLD2
	        jp __PRINT_SET_STATE

__PRINT_BOLD2:
	        exx
	        call BOLD_TMP
	        jp __PRINT_RESTART

__PRINT_ITA:
	        ld hl, __PRINT_ITA2
	        jp __PRINT_SET_STATE

__PRINT_ITA2:
	        exx
	        call ITALIC_TMP
	        jp __PRINT_RESTART


__BOLD:
	        push hl
	        ld hl, MEM0
	        ld b, 8
__BOLD_LOOP:
	        ld a, (de)
	        ld c, a
	        rlca
	        or c
	        ld (hl), a
	        inc hl
	        inc de
	        djnz __BOLD_LOOP
	        pop hl
	        ld de, MEM0
	        ret


__ITALIC:
	        push hl
	        ld hl, MEM0
	        ex de, hl
	        ld bc, 8
	        ldir
	        ld hl, MEM0
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        inc hl
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        pop hl
	        ld de, MEM0
	        ret

PRINT_COMMA:
	        call __LOAD_S_POSN
	        ld a, e
	        and 16
	        add a, 16

PRINT_TAB:
	        PROC
	        LOCAL LOOP, CONTINUE

	        inc a
	        call __LOAD_S_POSN ; e = current row
	        ld d, a
	        ld a, e
	        cp 21h
	        jr nz, CONTINUE
	        ld e, -1
CONTINUE:
	        ld a, d
	        inc e
	        sub e  ; A = A - E
	        and 31 ;
	        ret z  ; Already at position E
	        ld b, a
LOOP:
	        ld a, ' '
	        call __PRINTCHAR
	        djnz LOOP
	        ret
	        ENDP

PRINT_AT: ; Changes cursor to ROW, COL
	         ; COL in A register
	         ; ROW in stack

	        pop hl    ; Ret address
	        ex (sp), hl ; callee H = ROW
	        ld l, a
	        ex de, hl

	        call __IN_SCREEN
	        ret nc    ; Return if out of screen

	        ld hl, __TVFLAGS
	        res 1, (hl)
#line 482 "D:/zxbasic/library-asm/print.asm"
	        jp __SAVE_S_POSN

	        LOCAL __PRINT_COM
	        LOCAL __BOLD
	        LOCAL __BOLD_LOOP
	        LOCAL __ITALIC
	        LOCAL __PRINT_EOL1
	        LOCAL __PRINT_EOL2
	        LOCAL __PRINT_AT1
	        LOCAL __PRINT_AT2
	        LOCAL __PRINT_AT2_END
	        LOCAL __PRINT_BOLD
	        LOCAL __PRINT_BOLD2
	        LOCAL __PRINT_ITA
	        LOCAL __PRINT_ITA2
	        LOCAL __PRINT_INK
	        LOCAL __PRINT_PAP
	        LOCAL __PRINT_SET_STATE
	        LOCAL __PRINT_TABLE
	        LOCAL __PRINT_TAB, __PRINT_TAB1, __PRINT_TAB2

__PRINT_TABLE:    ; Jump table for 0 .. 22 codes

	        DW __PRINT_NOP    ;  0
	        DW __PRINT_NOP    ;  1
	        DW __PRINT_NOP    ;  2
	        DW __PRINT_NOP    ;  3
	        DW __PRINT_NOP    ;  4
	        DW __PRINT_NOP    ;  5
	        DW __PRINT_COM    ;  6 COMMA
	        DW __PRINT_NOP    ;  7
	        DW __PRINT_DEL    ;  8 DEL
	        DW __PRINT_NOP    ;  9
	        DW __PRINT_NOP    ; 10
	        DW __PRINT_NOP    ; 11
	        DW __PRINT_NOP    ; 12
	        DW __PRINT_0Dh    ; 13
	        DW __PRINT_BOLD   ; 14
	        DW __PRINT_ITA    ; 15
	        DW __PRINT_INK    ; 16
	        DW __PRINT_PAP    ; 17
	        DW __PRINT_FLA    ; 18
	        DW __PRINT_BRI    ; 19
	        DW __PRINT_INV    ; 20
	        DW __PRINT_OVR    ; 21
	        DW __PRINT_AT     ; 22 AT
	        DW __PRINT_TAB    ; 23 TAB

	        ENDP


#line 3 "copy_attr.asm"
#line 4 "D:/zxbasic/library-asm/copy_attr.asm"



COPY_ATTR:
		; Just copies current permanent attribs to temporal attribs
		; and sets print mode
		PROC

		LOCAL INVERSE1
		LOCAL __REFRESH_TMP

	INVERSE1 EQU 02Fh

		ld hl, (ATTR_P)
		ld (ATTR_T), hl

		ld hl, FLAGS2
		call __REFRESH_TMP

		ld hl, P_FLAG
		call __REFRESH_TMP


__SET_ATTR_MODE:		; Another entry to set print modes. A contains (P_FLAG)


		LOCAL TABLE
		LOCAL CONT2

		rra					; Over bit to carry
		ld a, (FLAGS2)
		rla					; Over bit in bit 1, Over2 bit in bit 2
		and 3				; Only bit 0 and 1 (OVER flag)

		ld c, a
		ld b, 0

		ld hl, TABLE
		add hl, bc
		ld a, (hl)
		ld (PRINT_MODE), a

		ld hl, (P_FLAG)
		xor a			; NOP -> INVERSE0
		bit 2, l
		jr z, CONT2
		ld a, INVERSE1 	; CPL -> INVERSE1

CONT2:
		ld (INVERSE_MODE), a
		ret

TABLE:
		nop				; NORMAL MODE
		xor (hl)		; OVER 1 MODE
		and (hl)		; OVER 2 MODE
		or  (hl)		; OVER 3 MODE

#line 65 "D:/zxbasic/library-asm/copy_attr.asm"

__REFRESH_TMP:
		ld a, (hl)
		and 10101010b
		ld c, a
		rra
		or c
		ld (hl), a
		ret

		ENDP

#line 3500 "snaker2021.zxbas"
#line 1 "div8.asm"

				; --------------------------------
__DIVU8:	; 8 bit unsigned integer division
				; Divides (Top of stack, High Byte) / A
		pop hl	; --------------------------------
		ex (sp), hl	; CALLEE

__DIVU8_FAST:	; Does A / H
		ld l, h
		ld h, a		; At this point do H / L

		ld b, 8
		xor a		; A = 0, Carry Flag = 0

__DIV8LOOP:
		sla	h
		rla
		cp	l
		jr	c, __DIV8NOSUB
		sub	l
		inc	h

__DIV8NOSUB:
		djnz __DIV8LOOP

		ld	l, a		; save remainder
		ld	a, h		;

		ret			; a = Quotient,


					; --------------------------------
__DIVI8:		; 8 bit signed integer division Divides (Top of stack) / A
		pop hl		; --------------------------------
		ex (sp), hl

__DIVI8_FAST:
		ld e, a		; store operands for later
		ld c, h

		or a		; negative?
		jp p, __DIV8A
		neg			; Make it positive

__DIV8A:
		ex af, af'
		ld a, h
		or a
		jp p, __DIV8B
		neg
		ld h, a		; make it positive

__DIV8B:
		ex af, af'

		call __DIVU8_FAST

		ld a, c
		xor l		; bit 7 of A = 1 if result is negative

		ld a, h		; Quotient
		ret p		; return if positive

		neg
		ret


__MODU8:		; 8 bit module. REturns A mod (Top of stack) (unsigned operands)
		pop hl
		ex (sp), hl	; CALLEE

__MODU8_FAST:	; __FASTCALL__ entry
		call __DIVU8_FAST
		ld a, l		; Remainder

		ret		; a = Modulus


__MODI8:		; 8 bit module. REturns A mod (Top of stack) (For singed operands)
		pop hl
		ex (sp), hl	; CALLEE

__MODI8_FAST:	; __FASTCALL__ entry
		call __DIVI8_FAST
		ld a, l		; remainder

		ret		; a = Modulus

#line 3501 "snaker2021.zxbas"
#line 1 "draw.asm"

	; DRAW using bresenhams algorithm and screen positioning
; Copyleft (k) 2010 by J. Rodriguez (a.k.a. Boriel) http://www.boriel.com
; vim:ts=4:et:sw=4:

	; Y parameter in A
	; X parameter in high byte on top of the stack







#line 1 "PixelDown.asm"

	;
	; PixelDown
	; Alvin Albrecht 2002
	;

	; Pixel Down
	;
	; Adjusts screen address HL to move one pixel down in the display.
	; (0,0) is located at the top left corner of the screen.
	;
; enter: HL = valid screen address
; exit : Carry = moved off screen
	;        Carry'= moved off current cell (needs ATTR update)
	;        HL = moves one pixel down
; used : AF, HL

SP.PixelDown:
	   inc h
	   ld a,h
	   and $07
	   ret nz
	   ex af, af'  ; Sets carry on F'
	   scf         ; which flags ATTR must be updated
	   ex af, af'
	   ld a,h
	   sub $08
	   ld h,a
	   ld a,l
	   add a,$20
	   ld l,a
	   ret nc
	   ld a,h
	   add a,$08
	   ld h,a
	;IF DISP_HIRES
	;   and $18
	;   cp $18
	;ELSE
	   cp $58
	;ENDIF
	   ccf
	   ret
#line 15 "draw.asm"
#line 1 "PixelUp.asm"

	;
	; PixelUp
	; Alvin Albrecht 2002
	;

	; Pixel Up
	;
	; Adjusts screen address HL to move one pixel up in the display.
	; (0,0) is located at the top left corner of the screen.
	;
; enter: HL = valid screen address
; exit : Carry = moved off screen
	;        HL = moves one pixel up
; used : AF, HL

SP.PixelUp:
	   ld a,h
	   dec h
	   and $07
	   ret nz
	   ex af, af'
	   scf
	   ex af, af'
	   ld a,$08
	   add a,h
	   ld h,a
	   ld a,l
	   sub $20
	   ld l,a
	   ret nc
	   ld a,h
	   sub $08
	   ld h,a
	;IF DISP_HIRES
	;   and $18
	;   cp $18
	;   ccf
	;ELSE
	   cp $40
	;ENDIF
	   ret
#line 16 "draw.asm"
#line 1 "PixelLeft.asm"

	;
	; PixelLeft
	; Jose Rodriguez 2012
	;

	; PixelLeft
	;
	; Adjusts screen address HL and Pixel bit A to move one pixel to the left
	; on the display.  Start of line set Carry (Out of Screen)
	;
; enter: HL = valid screen address
	;        A = Bit Set
; exit : Carry = moved off screen
	;        Carry' Set if moved off current ATTR CELL
	;        HL = moves one character left, if needed
	;        A = Bit Set with new pixel pos.
; used : AF, HL


SP.PixelLeft:
	    rlca    ; Sets new pixel bit 1 to the right
	    ret nc
	    ex af, af' ; Signal in C' we've moved off current ATTR cell
	    ld a,l
	    dec a
	    ld l,a
	    cp 32      ; Carry if in screen
	    ccf
	    ld a, 1
	    ret

#line 17 "draw.asm"
#line 1 "PixelRight.asm"

	;
	; PixelRight
	; Jose Rodriguez 2012
	;


	; PixelRight
	;
	; Adjusts screen address HL and Pixel bit A to move one pixel to the left
	; on the display.  Start of line set Carry (Out of Screen)
	;
; enter: HL = valid screen address
	;        A = Bit Set
; exit : Carry = moved off screen
	;        Carry' Set if moved off current ATTR CELL
	;        HL = moves one character left, if needed
	;        A = Bit Set with new pixel pos.
; used : AF, HL


SP.PixelRight:
	    rrca    ; Sets new pixel bit 1 to the right
	    ret nc
	    ex af, af' ; Signal in C' we've moved off current ATTR cell
	    ld a, l
	    inc a
	    ld l, a
	    cp 32      ; Carry if IN screen
	    ccf
	    ld a, 80h
	    ret

#line 18 "draw.asm"

	;; DRAW PROCEDURE
	    PROC

	    LOCAL __DRAW1
	    LOCAL __DRAW2
	    LOCAL __DRAW3
	    LOCAL __DRAW4, __DRAW4_LOOP
	    LOCAL __DRAW5
	    LOCAL __DRAW6, __DRAW6_LOOP
	    LOCAL __DRAW_ERROR
	    LOCAL DX1, DX2, DY1, DY2
	    LOCAL __INCX, __INCY, __DECX, __DECY
	    LOCAL P_FLAG
	P_FLAG EQU 23697

__DRAW_ERROR:
	    jp __OUT_OF_SCREEN_ERR

DRAW:
	    ;; ENTRY POINT

	    LOCAL COORDS
	    LOCAL __DRAW_SETUP1, __DRAW_START, __PLOTOVER, __PLOTINVERSE

	    ex de, hl ; DE = Y OFFSET
	    pop hl	; return addr
	    ex (sp), hl ; CALLEE => HL = X OFFSET
	    ld bc, (COORDS)

	    ld a, c
	    add a, l
	    ld l, a
	    ld a, h
	    adc a, 0 ; HL = HL + C
	    ld h, a
	    jr nz, __DRAW_ERROR	; if a <> 0 => Out of Screen

	    ld a, b
	    add a, e
	    ld e, a
	    ld a, d
	    adc a, 0 ; DE = DE + B
	    ld d, a
	    jr nz, __DRAW_ERROR	; if a <> 0 => Out of Screen

	    ld a, 191
	    sub e
	    jr c, __DRAW_ERROR	; Out of screen

	    ld h, e			; now H,L = y2, x2

__DRAW:
	    ; __FASTCALL__ Entry. Plots from (COORDS) to coord H, L
	    push hl
	    ex de, hl		; D,E = y2, x2;

	    ld a, (P_FLAG)
	    ld c, a
	    bit 2, a        ; Test for INVERSE1
	    jr z, __DRAW_SETUP1
	    ld a, 2Fh       ; CPL
	    ld (__PLOTINVERSE), a
	    ld a, 0A6h      ; and (hl)
	    jp __DRAW_START

__DRAW_SETUP1:
	    xor a           ; nop
	    ld (__PLOTINVERSE), a
	    ld a, 0B6h      ; or (hl)
	    bit 0, c        ; Test for OVER
	    jr z, __DRAW_START
	    ld a, 0AEh      ; xor (hl)

__DRAW_START:
	    ld (__PLOTOVER), a ; "Pokes" last operation
	    exx
	    ld bc, (COORDS) ; B'C' = y1, x1
	    ld d, b         ; Saves B' in D'
	    ld a, 191
	    LOCAL __PIXEL_ADDR
	__PIXEL_ADDR EQU 22ACh
	    call __PIXEL_ADDR

	    ;; Now gets pixel mask in A register
	    ld b, a
	    inc b
	    xor a
	    scf
	    LOCAL __PIXEL_MASK
__PIXEL_MASK:
	    rra
	    djnz __PIXEL_MASK

	    ld b, d         ; Restores B' from D'
	    pop de			; D'E' = y2, x2
    exx             ; At this point: D'E' = y2,x2 coords
	                    ; B'C' = y1, y1  coords
	    ex af, af'      ; Saves A reg for later
	                    ; A' = Pixel mask
	                    ; H'L' = Screen Address of pixel

	    ld bc, (COORDS) ; B,C = y1, x1

	    ld a, e
	    sub c			; dx = X2 - X1
	    ld c, a			; Saves dx in c

	    ld a, 0Ch       ; INC C opcode
	    ld hl, __INCX   ; xi = 1
	    jr nc, __DRAW1

	    ld a, c
	    neg		 		; dx = X1 - X2
	    ld c, a
	    ld a, 0Dh       ; DEC C opcode
	    ld hl, __DECX   ; xi = -1

__DRAW1:
	    ld (DX1), a
	    ld (DX1 + 2), hl ; Updates DX1 call address
	    ld (DX2), a
	    ld (DX2 + 2), hl ; Updates DX2 call address

	    ld a, d
	    sub b			; dy = Y2 - Y1
	    ld b, a			; Saves dy in b

	    ld a, 4         ; INC B opcode
	    ld hl, __INCY   ; y1 = 1
	    jr nc, __DRAW2

	    ld a, b
	    neg
	    ld b, a         ; dy = Y2 - Y1
	    ld a, 5         ; DEC B opcode
	    ld hl, __DECY   ; y1 = -1

__DRAW2:
	    ld (DY1), a
	    ld (DY1 + 2), hl ; Updates DX1 call address
	    ld (DY2), a
	    ld (DY2 + 2), hl ; Updates DX2 call address

	    ld a, b
	    sub c			; dy - dx
	    jr c, __DRAW_DX_GT_DY	; DX > DY

	    ; At this point DY >= DX
	    ; --------------------------
	    ; HL = error = dY / 2
	    ld h, 0
	    ld l, b
	    srl l

	    ; DE = -dX
	    xor a
	    sub c
	    ld e, a
	    sbc a, a
	    ld d, a

	    ; BC = DY
	    ld c, b
	    ld b, h

	    exx
	    scf             ; Sets Carry to signal update ATTR
	    ex af, af'      ; Brings back pixel mask
	    ld e, a         ; Saves it in free E register
	    jp __DRAW4_LOOP

__DRAW3:			; While c != e => while y != y2
	    exx
	    add hl, de		; error -= dX
	    bit 7, h		;
	    exx				; recover coordinates
	    jr z, __DRAW4	; if error < 0

	    exx
	    add hl, bc		; error += dY
	    exx

	    ld a, e
DX1:                ; x += xi
	    inc c
	    call __INCX     ; This address will be dynamically updated
	    ld e, a

__DRAW4:

DY1:                ; y += yi
	    inc b
	    call __INCY     ; This address will be dynamically updated
	    ld a, e         ; Restores A reg.
	    call __FASTPLOT

__DRAW4_LOOP:
	    ld a, b
	    cp d
	    jp nz, __DRAW3
	    ld (COORDS), bc
	    ret

__DRAW_DX_GT_DY:	; DX > DY
	    ; --------------------------
	    ; HL = error = dX / 2
	    ld h, 0
	    ld l, c
	    srl l			; HL = error = DX / 2

	    ; DE = -dY
	    xor a
	    sub b
	    ld e, a
	    sbc a, a
	    ld d, a

	    ; BC = dX
	    ld b, h

	    exx
	    ld d, e
	    scf             ; Sets Carry to signal update ATTR
	    ex af, af'      ; Brings back pixel mask
	    ld e, a         ; Saves it in free E register
	    jp __DRAW6_LOOP

__DRAW5:			; While loop
	    exx
	    add hl, de		; error -= dY
	    bit 7, h		; if (error < 0)
	    exx				; Restore coords
	    jr z, __DRAW6	;
	    exx
	    add hl, bc		; error += dX
	    exx

DY2:                ; y += yi
	    inc b
	    call __INCY     ; This address will be dynamically updated

__DRAW6:
	    ld a, e
DX2:                ; x += xi
	    inc c
	    call __INCX     ; This address will be dynamically updated
	    ld e, a
	    call __FASTPLOT

__DRAW6_LOOP:
	    ld a, c			; Current X coord
	    cp d
	    jp nz, __DRAW5
	    ld (COORDS), bc
	    ret

	COORDS   EQU 5C7Dh

__DRAW_END:
	    exx
	    ret

	    ;; Given a A mask and an HL screen position
	    ;; return the next left position
	    ;; Also updates BC coords
	__DECX EQU SP.PixelLeft

	    ;; Like the above, but to the RIGHT
	    ;; Also updates BC coords
	__INCX EQU SP.PixelRight

	    ;; Given an HL screen position, calculates
	    ;; the above position
	    ;; Also updates BC coords
	__INCY EQU SP.PixelUp

	    ;; Given an HL screen position, calculates
	    ;; the above position
	    ;; Also updates BC coords
	__DECY EQU SP.PixelDown

	    ;; Puts the A register MASK in (HL)
__FASTPLOT:
__PLOTINVERSE:
	    nop         ; Replace with CPL if INVERSE 1
__PLOTOVER:
	    or (hl)     ; Replace with XOR (hl) if OVER 1 AND INVERSE 0
	                ; Replace with AND (hl) if INVERSE 1

	    ld (hl), a
	    ex af, af'  ; Recovers flag. If Carry set => update ATTR
	    ld a, e     ; Recovers A reg
	    ret nc

	    push hl
	    push de
	    push bc
	    call SET_PIXEL_ADDR_ATTR
	    pop bc
	    pop de
	    pop hl

	    LOCAL __FASTPLOTEND
__FASTPLOTEND:
	    or a        ; Resets carry flag
	    ex af, af'  ; Recovers A reg
	    ld a, e
	    ret

	    ENDP

#line 3502 "snaker2021.zxbas"
#line 1 "eq16.asm"

__EQ16:	; Test if 16bit values HL == DE
		; Returns result in A: 0 = False, FF = True
			xor a	; Reset carry flag
			sbc hl, de
			ret nz
			inc a
			ret

#line 3503 "snaker2021.zxbas"



#line 1 "ftou32reg.asm"

#line 1 "neg32.asm"

__ABS32:
		bit 7, d
		ret z

__NEG32: ; Negates DEHL (Two's complement)
		ld a, l
		cpl
		ld l, a

		ld a, h
		cpl
		ld h, a

		ld a, e
		cpl
		ld e, a

		ld a, d
		cpl
		ld d, a

		inc l
		ret nz

		inc h
		ret nz

		inc de
		ret

#line 2 "ftou32reg.asm"

__FTOU32REG:	; Converts a Float to (un)signed 32 bit integer (NOTE: It's ALWAYS 32 bit signed)
					; Input FP number in A EDCB (A exponent, EDCB mantissa)
				; Output: DEHL 32 bit number (signed)
		PROC

		LOCAL __IS_FLOAT
		LOCAL __NEGATE

		or a
		jr nz, __IS_FLOAT
		; Here if it is a ZX ROM Integer

		ld h, c
		ld l, d
	ld a, e	 ; Takes sign: FF = -, 0 = +
		ld de, 0
		inc a
		jp z, __NEG32	; Negates if negative
		ret

__IS_FLOAT:  ; Jumps here if it is a true floating point number
		ld h, e
		push hl  ; Stores it for later (Contains Sign in H)

		push de
		push bc

		exx
		pop de   ; Loads mantissa into C'B' E'D'
		pop bc	 ;

		set 7, c ; Highest mantissa bit is always 1
		exx

		ld hl, 0 ; DEHL = 0
		ld d, h
		ld e, l

		;ld a, c  ; Get exponent
		sub 128  ; Exponent -= 128
		jr z, __FTOU32REG_END	; If it was <= 128, we are done (Integers must be > 128)
		jr c, __FTOU32REG_END	; It was decimal (0.xxx). We are done (return 0)

		ld b, a  ; Loop counter = exponent - 128

__FTOU32REG_LOOP:
		exx 	 ; Shift C'B' E'D' << 1, output bit stays in Carry
		sla d
		rl e
		rl b
		rl c

	    exx		 ; Shift DEHL << 1, inserting the carry on the right
		rl l
		rl h
		rl e
		rl d

		djnz __FTOU32REG_LOOP

__FTOU32REG_END:
		pop af   ; Take the sign bit
		or a	 ; Sets SGN bit to 1 if negative
		jp m, __NEGATE ; Negates DEHL

		ret

__NEGATE:
	    exx
	    ld a, d
	    or e
	    or b
	    or c
	    exx
	    jr z, __END
	    inc l
	    jr nz, __END
	    inc h
	    jr nz, __END
	    inc de
	LOCAL __END
__END:
	    jp __NEG32
		ENDP


__FTOU8:	; Converts float in C ED LH to Unsigned byte in A
		call __FTOU32REG
		ld a, l
		ret

#line 3507 "snaker2021.zxbas"
#line 1 "iload32.asm"

	; __FASTCALL__ routine which
	; loads a 32 bits integer into DE,HL
	; stored at position pointed by POINTER HL
	; DE,HL <-- (HL)

__ILOAD32:
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
		ld a, (hl)
		inc hl
		ld h, (hl)
		ld l, a
		ex de, hl
		ret

#line 3508 "snaker2021.zxbas"

#line 1 "inkey.asm"

	; INKEY Function
	; Returns a string allocated in dynamic memory
	; containing the string.
	; An empty string otherwise.



INKEY:
		PROC
		LOCAL __EMPTY_INKEY
		LOCAL KEY_SCAN
		LOCAL KEY_TEST
		LOCAL KEY_CODE

		ld bc, 3	; 1 char length string
		call __MEM_ALLOC

		ld a, h
		or l
		ret z	; Return if NULL (No memory)

		push hl ; Saves memory pointer

		call KEY_SCAN
		jp nz, __EMPTY_INKEY

		call KEY_TEST
		jp nc, __EMPTY_INKEY

		dec d	; D is expected to be FLAGS so set bit 3 $FF
				; 'L' Mode so no keywords.
		ld e, a	; main key to A
				; C is MODE 0 'KLC' from above still.
		call KEY_CODE ; routine K-DECODE
		pop hl

		ld (hl), 1
		inc hl
		ld (hl), 0
		inc hl
		ld (hl), a
		dec hl
		dec hl	; HL Points to string result
		ret

__EMPTY_INKEY:
		pop hl
		xor a
		ld (hl), a
		inc hl
		ld (hl), a
		dec hl
		ret

	KEY_SCAN	EQU 028Eh
	KEY_TEST	EQU 031Eh
	KEY_CODE	EQU 0333h

		ENDP

#line 3510 "snaker2021.zxbas"
#line 1 "lei16.asm"

__LEI16:
	    PROC
	    LOCAL checkParity
	    or a
	    sbc hl, de
	    ld a, 1
	    ret z
	    jp po, checkParity
	    ld a, h
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 3511 "snaker2021.zxbas"
#line 1 "loadstr.asm"



	; Loads a string (ptr) from HL
	; and duplicates it on dynamic memory again
	; Finally, it returns result pointer in HL

__ILOADSTR:		; This is the indirect pointer entry HL = (HL)
			ld a, h
			or l
			ret z
			ld a, (hl)
			inc hl
			ld h, (hl)
			ld l, a

__LOADSTR:		; __FASTCALL__ entry
			ld a, h
			or l
			ret z	; Return if NULL

			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl  ; BC = LEN(a$)

			inc bc
			inc bc	; BC = LEN(a$) + 2 (two bytes for length)

			push hl
			push bc
			call __MEM_ALLOC
			pop bc  ; Recover length
			pop de  ; Recover origin

			ld a, h
			or l
			ret z	; Return if NULL (No memory)

			ex de, hl ; ldir takes HL as source, DE as destiny, so SWAP HL,DE
			push de	; Saves destiny start
			ldir	; Copies string (length number included)
			pop hl	; Recovers destiny in hl as result
			ret
#line 3512 "snaker2021.zxbas"
#line 1 "lti16.asm"

#line 1 "lei8.asm"

__LEI8: ; Signed <= comparison for 8bit int
	        ; A <= H (registers)
	    PROC
	    LOCAL checkParity
	    sub h
	    jr nz, __LTI
	    inc a
	    ret

__LTI8:  ; Test 8 bit values A < H
	    sub h

__LTI:   ; Generic signed comparison
	    jp po, checkParity
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 2 "lti16.asm"

__LTI16: ; Test 8 bit values HL < DE
         ; Returns result in A: 0 = False, !0 = True
	    PROC
	    LOCAL checkParity
	    or a
	    sbc hl, de
	    jp po, checkParity
	    ld a, h
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 3513 "snaker2021.zxbas"

#line 1 "mul8.asm"

__MUL8:		; Performs 8bit x 8bit multiplication
		PROC

		;LOCAL __MUL8A
		LOCAL __MUL8LOOP
		LOCAL __MUL8B
				; 1st operand (byte) in A, 2nd operand into the stack (AF)
		pop hl	; return address
		ex (sp), hl ; CALLE convention

;;__MUL8_FAST: ; __FASTCALL__ entry
	;;	ld e, a
	;;	ld d, 0
	;;	ld l, d
	;;
	;;	sla h
	;;	jr nc, __MUL8A
	;;	ld l, e
	;;
;;__MUL8A:
	;;
	;;	ld b, 7
;;__MUL8LOOP:
	;;	add hl, hl
	;;	jr nc, __MUL8B
	;;
	;;	add hl, de
	;;
;;__MUL8B:
	;;	djnz __MUL8LOOP
	;;
	;;	ld a, l ; result = A and HL  (Truncate to lower 8 bits)

__MUL8_FAST: ; __FASTCALL__ entry, a = a * h (8 bit mul) and Carry

	    ld b, 8
	    ld l, a
	    xor a

__MUL8LOOP:
	    add a, a ; a *= 2
	    sla l
	    jp nc, __MUL8B
	    add a, h

__MUL8B:
	    djnz __MUL8LOOP

		ret		; result = HL
		ENDP

#line 3515 "snaker2021.zxbas"
#line 1 "mulf.asm"

#line 1 "stackf.asm"

	; -------------------------------------------------------------
	; Functions to manage FP-Stack of the ZX Spectrum ROM CALC
	; -------------------------------------------------------------


	__FPSTACK_PUSH EQU 2AB6h	; Stores an FP number into the ROM FP stack (A, ED CB)
	__FPSTACK_POP  EQU 2BF1h	; Pops an FP number out of the ROM FP stack (A, ED CB)

__FPSTACK_PUSH2: ; Pushes Current A ED CB registers and top of the stack on (SP + 4)
	                 ; Second argument to push into the stack calculator is popped out of the stack
	                 ; Since the caller routine also receives the parameters into the top of the stack
	                 ; four bytes must be removed from SP before pop them out

	    call __FPSTACK_PUSH ; Pushes A ED CB into the FP-STACK
	    exx
	    pop hl       ; Caller-Caller return addr
	    exx
	    pop hl       ; Caller return addr

	    pop af
	    pop de
	    pop bc

	    push hl      ; Caller return addr
	    exx
	    push hl      ; Caller-Caller return addr
	    exx

	    jp __FPSTACK_PUSH


__FPSTACK_I16:	; Pushes 16 bits integer in HL into the FP ROM STACK
					; This format is specified in the ZX 48K Manual
					; You can push a 16 bit signed integer as
					; 0 SS LL HH 0, being SS the sign and LL HH the low
					; and High byte respectively
		ld a, h
		rla			; sign to Carry
		sbc	a, a	; 0 if positive, FF if negative
		ld e, a
		ld d, l
		ld c, h
		xor a
		ld b, a
		jp __FPSTACK_PUSH
#line 2 "mulf.asm"

	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)
	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order A DE BC.
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__MULF:	; Multiplication
		call __FPSTACK_PUSH2

		; ------------- ROM MUL
		rst 28h
		defb 04h	;
		defb 38h;   ; END CALC

		jp __FPSTACK_POP

#line 3516 "snaker2021.zxbas"
#line 1 "neg16.asm"

	; Negates HL value (16 bit)
__ABS16:
		bit 7, h
		ret z

__NEGHL:
		ld a, l			; HL = -HL
		cpl
		ld l, a
		ld a, h
		cpl
		ld h, a
		inc hl
		ret

#line 3517 "snaker2021.zxbas"


#line 1 "pause.asm"

	; The PAUSE statement (Calling the ROM)

__PAUSE:
		ld b, h
	    ld c, l
	    jp 1F3Dh  ; PAUSE_1
#line 3520 "snaker2021.zxbas"
#line 1 "pistore32.asm"

#line 1 "store32.asm"

__PISTORE32:
			push hl
			push ix
			pop hl
			add hl, bc
			pop bc

__ISTORE32:  ; Load address at hl, and stores E,D,B,C integer at that address
			ld a, (hl)
			inc hl
			ld h, (hl)
			ld l, a

__STORE32:	; Stores the given integer in DEBC at address HL
			ld (hl), c
			inc hl
			ld (hl), b
			inc hl
			ld (hl), e
			inc hl
			ld (hl), d
			ret

#line 2 "pistore32.asm"

	; The content of this file has been moved to "store32.asm"
#line 3521 "snaker2021.zxbas"
#line 1 "plot.asm"

	; MIXED __FASTCAL__ / __CALLE__ PLOT Function
	; Plots a point into the screen calling the ZX ROM PLOT routine

	; Y in A (accumulator)
	; X in top of the stack






PLOT:
		PROC

		LOCAL PLOT_SUB
		LOCAL PIXEL_ADDR
		LOCAL COORDS
		LOCAL __PLOT_ERR
	    LOCAL P_FLAG
	    LOCAL __PLOT_OVER1

	P_FLAG EQU 23697

		pop hl
		ex (sp), hl ; Callee

		ld b, a
		ld c, h

#line 35 "D:/zxbasic/library-asm/plot.asm"

#line 41 "D:/zxbasic/library-asm/plot.asm"

		ld a, 191
		cp b
		jr c, __PLOT_ERR ; jr is faster here (#1)

__PLOT:			; __FASTCALL__ entry (b, c) = pixel coords (y, x)
		ld (COORDS), bc	; Saves current point
		ld a, 191 ; Max y coord
		call PIXEL_ADDR
	    res 6, h    ; Starts from 0
	    ld bc, (SCREEN_ADDR)
	    add hl, bc  ; Now current offset

	    ld b, a
	    inc b
	    ld a, 0FEh
	LOCAL __PLOT_LOOP
__PLOT_LOOP:
	    rrca
	    djnz __PLOT_LOOP

	    ld b, a
	    ld a, (P_FLAG)
	    ld c, a
	    ld a, (hl)
	    bit 0, c        ; is it OVER 1
	    jr nz, __PLOT_OVER1
	    and b

__PLOT_OVER1:
	    bit 2, c        ; is it inverse 1
	    jr nz, __PLOT_END

	    xor b
	    cpl

	LOCAL __PLOT_END
__PLOT_END:
	    ld (hl), a
	    jp SET_PIXEL_ADDR_ATTR

__PLOT_ERR:
	    jp __OUT_OF_SCREEN_ERR ; Spent 3 bytes, but saves 3 T-States at (#1)

	PLOT_SUB EQU 22ECh
	PIXEL_ADDR EQU 22ACh
	COORDS EQU 5C7Dh
		ENDP
#line 3522 "snaker2021.zxbas"

#line 1 "print_eol_attr.asm"

	; Calls PRINT_EOL and then COPY_ATTR, so saves
	; 3 bytes




PRINT_EOL_ATTR:
		call PRINT_EOL
		jp COPY_ATTR
#line 3524 "snaker2021.zxbas"
#line 1 "printstr.asm"






	; PRINT command routine
	; Prints string pointed by HL

PRINT_STR:
__PRINTSTR:		; __FASTCALL__ Entry to print_string
			PROC
			LOCAL __PRINT_STR_LOOP
	        LOCAL __PRINT_STR_END

	        ld d, a ; Saves A reg (Flag) for later

			ld a, h
			or l
			ret z	; Return if the pointer is NULL

	        push hl

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl	; BC = LEN(a$); HL = &a$

__PRINT_STR_LOOP:
			ld a, b
			or c
			jr z, __PRINT_STR_END 	; END if BC (counter = 0)

			ld a, (hl)
			call __PRINTCHAR
			inc hl
			dec bc
			jp __PRINT_STR_LOOP

__PRINT_STR_END:
	        pop hl
	        ld a, d ; Recovers A flag
	        or a   ; If not 0 this is a temporary string. Free it
	        ret z
	        jp __MEM_FREE ; Frees str from heap and return from there

__PRINT_STR:
	        ; Fastcall Entry
	        ; It ONLY prints strings
	        ; HL = String start
	        ; BC = String length (Number of chars)
	        push hl ; Push str address for later
	        ld d, a ; Saves a FLAG
	        jp __PRINT_STR_LOOP

			ENDP

#line 3525 "snaker2021.zxbas"
#line 1 "printu16.asm"

#line 1 "printi16.asm"

#line 1 "printnum.asm"




__PRINTU_START:
		PROC

		LOCAL __PRINTU_CONT

		ld a, b
		or a
		jp nz, __PRINTU_CONT

		ld a, '0'
		jp __PRINT_DIGIT


__PRINTU_CONT:
		pop af
		push bc
		call __PRINT_DIGIT
		pop bc
		djnz __PRINTU_CONT
		ret

		ENDP


__PRINT_MINUS: ; PRINT the MINUS (-) sign. CALLER mus preserve registers
		ld a, '-'
		jp __PRINT_DIGIT

	__PRINT_DIGIT EQU __PRINTCHAR ; PRINTS the char in A register, and puts its attrs


#line 2 "printi16.asm"
#line 1 "div16.asm"

	; 16 bit division and modulo functions
	; for both signed and unsigned values



__DIVU16:    ; 16 bit unsigned division
	             ; HL = Dividend, Stack Top = Divisor

		;   -- OBSOLETE ; Now uses FASTCALL convention
		;   ex de, hl
	    ;	pop hl      ; Return address
	    ;	ex (sp), hl ; CALLEE Convention

__DIVU16_FAST:
	    ld a, h
	    ld c, l
	    ld hl, 0
	    ld b, 16

__DIV16LOOP:
	    sll c
	    rla
	    adc hl,hl
	    sbc hl,de
	    jr  nc, __DIV16NOADD
	    add hl,de
	    dec c

__DIV16NOADD:
	    djnz __DIV16LOOP

	    ex de, hl
	    ld h, a
	    ld l, c

	    ret     ; HL = quotient, DE = Mudulus



__MODU16:    ; 16 bit modulus
	             ; HL = Dividend, Stack Top = Divisor

	    ;ex de, hl
	    ;pop hl
	    ;ex (sp), hl ; CALLEE Convention

	    call __DIVU16_FAST
	    ex de, hl	; hl = reminder (modulus)
					; de = quotient

	    ret


__DIVI16:	; 16 bit signed division
		;	--- The following is OBSOLETE ---
		;	ex de, hl
		;	pop hl
		;	ex (sp), hl 	; CALLEE Convention

__DIVI16_FAST:
		ld a, d
		xor h
		ex af, af'		; BIT 7 of a contains result

		bit 7, d		; DE is negative?
		jr z, __DIVI16A

		ld a, e			; DE = -DE
		cpl
		ld e, a
		ld a, d
		cpl
		ld d, a
		inc de

__DIVI16A:
		bit 7, h		; HL is negative?
		call nz, __NEGHL

__DIVI16B:
		call __DIVU16_FAST
		ex af, af'

		or a
		ret p	; return if positive
	    jp __NEGHL


__MODI16:    ; 16 bit modulus
	             ; HL = Dividend, Stack Top = Divisor

	    ;ex de, hl
	    ;pop hl
	    ;ex (sp), hl ; CALLEE Convention

	    call __DIVI16_FAST
	    ex de, hl	; hl = reminder (modulus)
					; de = quotient

	    ret

#line 3 "printi16.asm"



__PRINTI16:	; Prints a 16bits signed in HL
				; Converts 16 to 32 bits
		PROC

		LOCAL __PRINTU_LOOP
		ld a, h
		or a

		jp p, __PRINTU16

		call __PRINT_MINUS
		call __NEGHL

__PRINTU16:

		ld b, 0
__PRINTU_LOOP:
		ld a, h
		or l
		jp z, __PRINTU_START

		push bc
		ld de, 10
		call __DIVU16_FAST ; Divides by DE. DE = MODULUS at exit. Since < 256, E = Modulus
		pop bc

		ld a, e
		or '0'		  ; Stores ASCII digit (must be print in reversed order)
		push af
		inc b
		jp __PRINTU_LOOP ; Uses JP in loops

		ENDP

#line 2 "printu16.asm"

#line 3526 "snaker2021.zxbas"
#line 1 "printu32.asm"

#line 1 "printi32.asm"



#line 1 "div32.asm"



				 ; ---------------------------------------------------------
__DIVU32:    ; 32 bit unsigned division
	             ; DEHL = Dividend, Stack Top = Divisor
	             ; OPERANDS P = Dividend, Q = Divisor => OPERATION => P / Q
				 ;
				 ; Changes A, BC DE HL B'C' D'E' H'L'
				 ; ---------------------------------------------------------
	        exx
	        pop hl   ; return address
	        pop de   ; low part
	        ex (sp), hl ; CALLEE Convention ; H'L'D'E' => Dividend

__DIVU32START: ; Performs D'E'H'L' / HLDE
	        ; Now switch to DIVIDEND = B'C'BC / DIVISOR = D'E'DE (A / B)
	        push de ; push Lowpart(Q)
			ex de, hl	; DE = HL
	        ld hl, 0
	        exx
	        ld b, h
	        ld c, l
	        pop hl
	        push de
	        ex de, hl
	        ld hl, 0        ; H'L'HL = 0
	        exx
	        pop bc          ; Pop HightPart(B) => B = B'C'BC
	        exx

	        ld a, 32 ; Loop count

__DIV32LOOP:
	        sll c  ; B'C'BC << 1 ; Output most left bit to carry
	        rl  b
	        exx
	        rl c
	        rl b
	        exx

	        adc hl, hl
	        exx
	        adc hl, hl
	        exx

	        sbc hl,de
	        exx
	        sbc hl,de
	        exx
	        jp nc, __DIV32NOADD	; use JP inside a loop for being faster

	        add hl, de
	        exx
	        adc hl, de
	        exx
	        dec bc

__DIV32NOADD:
	        dec a
	        jp nz, __DIV32LOOP	; use JP inside a loop for being faster
	        ; At this point, quotient is stored in B'C'BC and the reminder in H'L'HL

	        push hl
	        exx
	        pop de
	        ex de, hl ; D'E'H'L' = 32 bits modulus
	        push bc
	        exx
	        pop de    ; DE = B'C'
	        ld h, b
	        ld l, c   ; DEHL = quotient D'E'H'L' = Modulus

	        ret     ; DEHL = quotient, D'E'H'L' = Modulus



__MODU32:    ; 32 bit modulus for 32bit unsigned division
	             ; DEHL = Dividend, Stack Top = Divisor (DE, HL)

	        exx
	        pop hl   ; return address
	        pop de   ; low part
	        ex (sp), hl ; CALLEE Convention ; H'L'D'E' => Dividend

	        call __DIVU32START	; At return, modulus is at D'E'H'L'

__MODU32START:

			exx
			push de
			push hl

			exx
			pop hl
			pop de

			ret


__DIVI32:    ; 32 bit signed division
	             ; DEHL = Dividend, Stack Top = Divisor
	             ; A = Dividend, B = Divisor => A / B
	        exx
	        pop hl   ; return address
	        pop de   ; low part
	        ex (sp), hl ; CALLEE Convention ; H'L'D'E' => Dividend

__DIVI32START:
			exx
			ld a, d	 ; Save sign
			ex af, af'
			bit 7, d ; Negative?
			call nz, __NEG32 ; Negates DEHL

			exx		; Now works with H'L'D'E'
			ex af, af'
			xor h
			ex af, af'  ; Stores sign of the result for later

			bit 7, h ; Negative?
			ex de, hl ; HLDE = DEHL
			call nz, __NEG32
			ex de, hl

			call __DIVU32START
			ex af, af' ; Recovers sign
			and 128	   ; positive?
			ret z

			jp __NEG32 ; Negates DEHL and returns from there


__MODI32:	; 32bits signed division modulus
			exx
	        pop hl   ; return address
	        pop de   ; low part
	        ex (sp), hl ; CALLEE Convention ; H'L'D'E' => Dividend

			call __DIVI32START
			jp __MODU32START

#line 4 "printi32.asm"



__PRINTI32:
		ld a, d
		or a
		jp p, __PRINTU32

		call __PRINT_MINUS
		call __NEG32

__PRINTU32:
		PROC
		LOCAL __PRINTU_LOOP

		ld b, 0 ; Counter

__PRINTU_LOOP:
		ld a, h
		or l
		or d
		or e
		jp z, __PRINTU_START

		push bc

		ld bc, 0
		push bc
		ld bc, 10
		push bc		  ; Push 00 0A (10 Dec) into the stack = divisor

		call __DIVU32 ; Divides by 32. D'E'H'L' contains modulo (L' since < 10)
		pop bc

		exx
		ld a, l
		or '0'		  ; Stores ASCII digit (must be print in reversed order)
		push af
		exx
		inc b
		jp __PRINTU_LOOP ; Uses JP in loops

		ENDP

#line 2 "printu32.asm"

#line 3527 "snaker2021.zxbas"
#line 1 "printu8.asm"

#line 1 "printi8.asm"




__PRINTI8:	; Prints an 8 bits number in Accumulator (A)
				; Converts 8 to 32 bits
		or a
		jp p, __PRINTU8

		push af
		call __PRINT_MINUS
		pop af
		neg

__PRINTU8:
		PROC

		LOCAL __PRINTU_LOOP

		ld b, 0 ; Counter

__PRINTU_LOOP:
		or a
		jp z, __PRINTU_START

		push bc
		ld h, 10
		call __DIVU8_FAST ; Divides by 10. D'E'H'L' contains modulo (L' since < 10)
		pop bc

		ld a, l
		or '0'		  ; Stores ASCII digit (must be print in reversed order)
		push af
		ld a, h
		inc b
		jp __PRINTU_LOOP ; Uses JP in loops

		ENDP

#line 2 "printu8.asm"

#line 3528 "snaker2021.zxbas"
#line 1 "pstore32.asm"



	; Stores a 32 bit integer number (DE,HL) at (IX + BC)
__PSTORE32:
			push hl
			push ix
			pop hl
			add hl, bc
			pop bc
			jp __STORE32
#line 3529 "snaker2021.zxbas"
#line 1 "pstorestr.asm"

; vim:ts=4:et:sw=4
	;
	; Stores an string (pointer to the HEAP by DE) into the address pointed
	; by (IX + BC). A new copy of the string is created into the HEAP
	;

#line 1 "storestr.asm"

; vim:ts=4:et:sw=4
	; Stores value of current string pointed by DE register into address pointed by HL
	; Returns DE = Address pointer  (&a$)
	; Returns HL = HL               (b$ => might be needed later to free it from the heap)
	;
	; e.g. => HL = _variableName    (DIM _variableName$)
	;         DE = Address into the HEAP
	;
	; This function will resize (REALLOC) the space pointed by HL
	; before copying the content of b$ into a$


#line 1 "strcpy.asm"

#line 1 "realloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.







	; ---------------------------------------------------------------------
	; MEM_REALLOC
	;  Reallocates a block of memory in the heap.
	;
	; Parameters
	;  HL = Pointer to the original block
	;  BC = New Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	;
; Notes:
	;  If BC = 0, the block is freed, otherwise
	;  the content of the original block is copied to the new one, and
	;  the new size is adjusted. If BC < original length, the content
	;  will be truncated. Otherwise, extra block content might contain
	;  memory garbage.
	;
	; ---------------------------------------------------------------------
__REALLOC:    ; Reallocates block pointed by HL, with new length BC
	        PROC

	        LOCAL __REALLOC_END

	        ld a, h
	        or l
	        jp z, __MEM_ALLOC    ; If HL == NULL, just do a malloc

	        ld e, (hl)
	        inc hl
	        ld d, (hl)    ; DE = First 2 bytes of HL block

	        push hl
	        exx
	        pop de
	        inc de        ; DE' <- HL + 2
	        exx            ; DE' <- HL (Saves current pointer into DE')

	        dec hl        ; HL = Block start

	        push de
	        push bc
	        call __MEM_FREE        ; Frees current block
	        pop bc
	        push bc
	        call __MEM_ALLOC    ; Gets a new block of length BC
	        pop bc
	        pop de

	        ld a, h
	        or l
	        ret z        ; Return if HL == NULL (No memory)

	        ld (hl), e
	        inc hl
	        ld (hl), d
	        inc hl        ; Recovers first 2 bytes in HL

	        dec bc
	        dec bc        ; BC = BC - 2 (Two bytes copied)

	        ld a, b
	        or c
	        jp z, __REALLOC_END        ; Ret if nothing to copy (BC == 0)

	        exx
	        push de
	        exx
	        pop de        ; DE <- DE' ; Start of remaining block

	        push hl        ; Saves current Block + 2 start
        ex de, hl    ; Exchanges them: DE is destiny block
	        ldir        ; Copies BC Bytes
	        pop hl        ; Recovers Block + 2 start

__REALLOC_END:

	        dec hl        ; Set HL
	        dec hl        ; To begin of block
	        ret

	        ENDP

#line 2 "strcpy.asm"

	; String library


__STRASSIGN: ; Performs a$ = b$ (HL = address of a$; DE = Address of b$)
			PROC

			LOCAL __STRREALLOC
			LOCAL __STRCONTINUE
			LOCAL __B_IS_NULL
			LOCAL __NOTHING_TO_COPY

			ld b, d
			ld c, e
			ld a, b
			or c
			jr z, __B_IS_NULL

			ex de, hl
			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl		; BC = LEN(b$)
			ex de, hl	; DE = &b$

__B_IS_NULL:		; Jumps here if B$ pointer is NULL
			inc bc
			inc bc		; BC = BC + 2  ; (LEN(b$) + 2 bytes for storing length)

			push de
			push hl

			ld a, h
			or l
			jr z, __STRREALLOC

			dec hl
			ld d, (hl)
			dec hl
			ld e, (hl)	; DE = MEMBLOCKSIZE(a$)
			dec de
			dec de		; DE = DE - 2  ; (Membloksize takes 2 bytes for memblock length)

			ld h, b
			ld l, c		; HL = LEN(b$) + 2  => Minimum block size required
			ex de, hl	; Now HL = BLOCKSIZE(a$), DE = LEN(b$) + 2

			or a		; Prepare to subtract BLOCKSIZE(a$) - LEN(b$)
			sbc hl, de  ; Carry if len(b$) > Blocklen(a$)
			jr c, __STRREALLOC ; No need to realloc
			; Need to reallocate at least to len(b$) + 2
			ex de, hl	; DE = Remaining bytes in a$ mem block.
			ld hl, 4
			sbc hl, de  ; if remaining bytes < 4 we can continue
			jr nc,__STRCONTINUE ; Otherwise, we realloc, to free some bytes

__STRREALLOC:
			pop hl
			call __REALLOC	; Returns in HL a new pointer with BC bytes allocated
			push hl

__STRCONTINUE:	;   Pops hl and de SWAPPED
			pop de	;	DE = &a$
			pop hl	; 	HL = &b$

			ld a, d		; Return if not enough memory for new length
			or e
			ret z		; Return if DE == NULL (0)

__STRCPY:	; Copies string pointed by HL into string pointed by DE
				; Returns DE as HL (new pointer)
			ld a, h
			or l
			jr z, __NOTHING_TO_COPY
			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl
			inc bc
			inc bc
			push de
			ldir
			pop hl
			ret

__NOTHING_TO_COPY:
			ex de, hl
			ld (hl), e
			inc hl
			ld (hl), d
			dec hl
			ret

			ENDP

#line 14 "storestr.asm"

__PISTORE_STR:          ; Indirect assignement at (IX + BC)
	    push ix
	    pop hl
	    add hl, bc

__ISTORE_STR:           ; Indirect assignement, hl point to a pointer to a pointer to the heap!
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c             ; HL = (HL)

__STORE_STR:
	    push de             ; Pointer to b$
	    push hl             ; Array pointer to variable memory address

	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c             ; HL = (HL)

	    call __STRASSIGN    ; HL (a$) = DE (b$); HL changed to a new dynamic memory allocation
	    ex de, hl           ; DE = new address of a$
	    pop hl              ; Recover variable memory address pointer

	    ld (hl), e
	    inc hl
	    ld (hl), d          ; Stores a$ ptr into elemem ptr

	    pop hl              ; Returns ptr to b$ in HL (Caller might needed to free it from memory)
	    ret

#line 8 "pstorestr.asm"

__PSTORE_STR:
	    push ix
	    pop hl
	    add hl, bc
	    jp __STORE_STR

#line 3530 "snaker2021.zxbas"
#line 1 "pstorestr2.asm"

; vim:ts=4:et:sw=4
	;
	; Stores an string (pointer to the HEAP by DE) into the address pointed
	; by (IX + BC). No new copy of the string is created into the HEAP, since
	; it's supposed it's already created (temporary string)
	;

#line 1 "storestr2.asm"

	; Similar to __STORE_STR, but this one is called when
	; the value of B$ if already duplicated onto the stack.
	; So we needn't call STRASSING to create a duplication
	; HL = address of string memory variable
	; DE = address of 2n string. It just copies DE into (HL)
	; 	freeing (HL) previously.



__PISTORE_STR2: ; Indirect store temporary string at (IX + BC)
	    push ix
	    pop hl
	    add hl, bc

__ISTORE_STR2:
		ld c, (hl)  ; Dereferences HL
		inc hl
		ld h, (hl)
		ld l, c		; HL = *HL (real string variable address)

__STORE_STR2:
		push hl
		ld c, (hl)
		inc hl
		ld h, (hl)
		ld l, c		; HL = *HL (real string address)

		push de
		call __MEM_FREE
		pop de

		pop hl
		ld (hl), e
		inc hl
		ld (hl), d
		dec hl		; HL points to mem address variable. This might be useful in the future.

		ret

#line 9 "pstorestr2.asm"

__PSTORE_STR2:
	    push ix
	    pop hl
	    add hl, bc
	    jp __STORE_STR2

#line 3531 "snaker2021.zxbas"
#line 1 "random.asm"

	; RANDOM functions

RANDOMIZE:
	    ; Randomize with 32 bit seed in DE HL
	    ; if SEED = 0, calls ROM to take frames as seed
	    PROC

	    LOCAL TAKE_FRAMES
	    LOCAL FRAMES

	    ld a, h
	    or l
	    or d
	    or e
	    jr z, TAKE_FRAMES

	    ld (RANDOM_SEED_LOW), hl
	    ld (RANDOM_SEED_HIGH), de
	    ret

TAKE_FRAMES:
	    ; Takes the seed from frames
	    ld hl, (FRAMES)
	    ld (RANDOM_SEED_LOW), hl
	    ld hl, (FRAMES + 2)
	    ld (RANDOM_SEED_HIGH), hl
	    ret

	FRAMES EQU    23672
	    ENDP

	RANDOM_SEED_HIGH EQU RAND+6    ; RANDOM seed, 16 higher bits
	RANDOM_SEED_LOW     EQU 23670  ; RANDOM seed, 16 lower bits


RAND:
	    PROC
	    LOCAL RAND_LOOP
	    ld b, 4
RAND_LOOP:
	    ld  hl,(RANDOM_SEED_LOW)   ; xz -> yw
	    ld  de,0C0DEh   ; yw -> zt
	    ld  (RANDOM_SEED_LOW),de  ; x = y, z = w
	    ld  a,e         ; w = w ^ ( w << 3 )
	    add a,a
	    add a,a
	    add a,a
	    xor e
	    ld  e,a
	    ld  a,h         ; t = x ^ (x << 1)
	    add a,a
	    xor h
	    ld  d,a
	    rra             ; t = t ^ (t >> 1) ^ w
	    xor d
	    xor e
	    ld  h,l         ; y = z
	    ld  l,a         ; w = t
	    ld  (RANDOM_SEED_HIGH),hl
	    push af
	    djnz RAND_LOOP
	    pop af
	    pop af
	    ld d, a
	    pop af
	    ld e, a
	    pop af
	    ld h, a
	    ret
	    ENDP

RND:
	    ; Returns a FLOATING point integer
	    ; using RAND as a mantissa
	    PROC
	    LOCAL RND_LOOP

	    call RAND
	    ; BC = HL since ZX BASIC uses ED CB A registers for FP
	    ld b, h
	    ld c, l

	    ld a, e
	    or d
	    or c
	    or b
	    ret z   ; Returns 0 if BC=DE=0

	    ; We already have a random 32 bit mantissa in ED CB
	    ; From 0001h to FFFFh

	    ld l, 81h	; Exponent
	    ; At this point we have [0 .. 1) FP number;

	    ; Now we must shift mantissa left until highest bit goes into carry
	    ld a, e ; Use A register for rotating E faster (using RLA instead of RL E)
RND_LOOP:
	    dec l
	    sla b
	    rl c
	    rl d
	    rla
	    jp nc, RND_LOOP

	    ; Now undo last mantissa left-shift once
	    ccf ; Clears carry to insert a 0 bit back into mantissa -> positive FP number
	    rra
	    rr d
	    rr c
	    rr b

	    ld e, a     ; E must have the highest byte
	    ld a, l     ; exponent in A
	    ret

	    ENDP

#line 3532 "snaker2021.zxbas"
#line 1 "read_restore.asm"

	;; This implements READ & RESTORE functions
	;; Reads a new element from the DATA Address code
	;; Updates the DATA_ADDR read ptr for the next read

	;; Data codification is 1 byte for type followed by data bytes
	;; Byte type is encoded as follows

;; 00: End of data
;; 01: String
;; 02: Byte
;; 03: Ubyte
;; 04: Integer
;; 05: UInteger
;; 06: Long
;; 07: ULong
;; 08: Fixed
;; 09: Float

	;; bit7 is set for a parameter-less function
	;; In that case, the next two bytes are the ptr of the function to jump




#line 1 "iloadf.asm"

	; __FASTCALL__ routine which
	; loads a 40 bits floating point into A ED CB
	; stored at position pointed by POINTER HL
	;A DE, BC <-- ((HL))

__ILOADF:
	    ld a, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, a

	; __FASTCALL__ routine which
	; loads a 40 bits floating point into A ED CB
	; stored at position pointed by POINTER HL
	;A DE, BC <-- (HL)

__LOADF:    ; Loads a 40 bits FP number from address pointed by HL
		ld a, (hl)
		inc hl
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
		ld c, (hl)
		inc hl
		ld b, (hl)
		ret

#line 26 "read_restore.asm"
#line 1 "ftof16reg.asm"



__FTOF16REG:	; Converts a Float to 16.16 (32 bit) fixed point decimal
					; Input FP number in A EDCB (A exponent, EDCB mantissa)

	    ld l, a     ; Saves exponent for later
		or d
		or e
		or b
		or c
	    ld h, e
		ret z		; Return if ZERO

		push hl  ; Stores it for later (Contains sign in H, exponent in L)

		push de
		push bc

		exx
		pop de   ; Loads mantissa into C'B' E'D'
		pop bc	 ;

		set 7, c ; Highest mantissa bit is always 1
		exx

		ld hl, 0 ; DEHL = 0
		ld d, h
		ld e, l

	    pop bc

		ld a, c  ; Get exponent
		sub 112  ; Exponent -= 128 + 16

	    push bc  ; Saves sign in b again

		jp z, __FTOU32REG_END	; If it was <= 128, we are done (Integers must be > 128)
		jp c, __FTOU32REG_END	; It was decimal (0.xxx). We are done (return 0)

		ld b, a  ; Loop counter = exponent - 128 + 16 (we need to shift 16 bit more)
		jp __FTOU32REG_LOOP ; proceed as an u32 integer

#line 27 "read_restore.asm"
#line 1 "f16tofreg.asm"


#line 1 "u32tofreg.asm"


__I8TOFREG:
		ld l, a
		rlca
		sbc a, a	; A = SGN(A)
		ld h, a
		ld e, a
		ld d, a

__I32TOFREG:	; Converts a 32bit signed integer (stored in DEHL)
					; to a Floating Point Number returned in (A ED CB)

		ld a, d
		or a		; Test sign

		jp p, __U32TOFREG	; It was positive, proceed as 32bit unsigned

		call __NEG32		; Convert it to positive
		call __U32TOFREG	; Convert it to Floating point

		set 7, e			; Put the sign bit (negative) in the 31bit of mantissa
		ret

__U8TOFREG:
					; Converts an unsigned 8 bit (A) to Floating point
		ld l, a
		ld h, 0
		ld e, h
		ld d, h

__U32TOFREG:	; Converts an unsigned 32 bit integer (DEHL)
					; to a Floating point number returned in A ED CB

	    PROC

	    LOCAL __U32TOFREG_END

		ld a, d
		or e
		or h
		or l
	    ld b, d
		ld c, e		; Returns 00 0000 0000 if ZERO
		ret z

		push de
		push hl

		exx
		pop de  ; Loads integer into B'C' D'E'
		pop bc
		exx

		ld l, 128	; Exponent
		ld bc, 0	; DEBC = 0
		ld d, b
		ld e, c

__U32TOFREG_LOOP: ; Also an entry point for __F16TOFREG
		exx
		ld a, d 	; B'C'D'E' == 0 ?
		or e
		or b
		or c
		jp z, __U32TOFREG_END	; We are done

		srl b ; Shift B'C' D'E' >> 1, output bit stays in Carry
		rr c
		rr d
		rr e
		exx

		rr e ; Shift EDCB >> 1, inserting the carry on the left
		rr d
		rr c
		rr b

		inc l	; Increment exponent
		jp __U32TOFREG_LOOP


__U32TOFREG_END:
		exx
	    ld a, l     ; Puts the exponent in a
		res 7, e	; Sets the sign bit to 0 (positive)

		ret
	    ENDP

#line 3 "f16tofreg.asm"

__F16TOFREG:	; Converts a 16.16 signed fixed point (stored in DEHL)
					; to a Floating Point Number returned in (C ED CB)
	    PROC

	    LOCAL __F16TOFREG2

		ld a, d
		or a		; Test sign

		jp p, __F16TOFREG2	; It was positive, proceed as 32bit unsigned

		call __NEG32		; Convert it to positive
		call __F16TOFREG2	; Convert it to Floating point

		set 7, e			; Put the sign bit (negative) in the 31bit of mantissa
		ret


__F16TOFREG2:	; Converts an unsigned 32 bit integer (DEHL)
					; to a Floating point number returned in C DE HL

	    ld a, d
	    or e
	    or h
	    or l
	    ld b, h
	    ld c, l
	    ret z       ; Return 00 0000 0000 if 0

		push de
		push hl

		exx
		pop de  ; Loads integer into B'C' D'E'
		pop bc
		exx

		ld l, 112	; Exponent
		ld bc, 0	; DEBC = 0
		ld d, b
		ld e, c
		jp __U32TOFREG_LOOP ; Proceed as an integer

	    ENDP

#line 28 "read_restore.asm"













	;; Updates restore point to the given HL mem. address
__RESTORE:
	    PROC
	    LOCAL __DATA_ADDR

	    ld (__DATA_ADDR), hl
	    ret

	;; Reads a value from the DATA mem area and updates __DATA_ADDR ptr to the
	;; next item. On Out Of Data, restarts
	;;
__READ:
	    LOCAL read_restart, cont, cont2, table, no_func
	    LOCAL dynamic_cast, dynamic_cast2, dynamic_cast3, dynamic_cast4
	    LOCAL _decode_table, coerce_to_int, coerce_to_int2, promote_to_i16
	    LOCAL _from_i8, _from_u8
	    LOCAL _from_i16, _from_u16
	    LOCAL _from_i32, _from_u32
	    LOCAL _from_fixed, __data_error

	    push af  ; type of data to read
	    ld hl, (__DATA_ADDR)
read_restart:
	    ld a, (hl)
	    or a   ; 0 => OUT of data
	    jr nz, cont
	    ;; Signals out of data

	    ld hl, __DATA__0
	    ld (__DATA_ADDR), hl
	    jr read_restart  ; Start again
cont:
	    and 0x80
	    ld a, (hl)
	    push af
	    jp z, no_func    ;; Loads data directly, not a function
	    inc hl
	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    inc hl
	    ld (__DATA_ADDR), hl  ;; Store address of next DATA
	    ex de, hl
cont2:
	    ld de, dynamic_cast
	    push de  ; ret address
	    jp (hl)  ; "call (hl)"

	    ;; Now tries to convert the given result to the expected type or raise an error
dynamic_cast:
	    exx
	    ex af, af'
	    pop af   ; type READ
	    and 0x7F ; clear bit 7
	    pop hl   ; type requested by USER (type of the READ variable)
	    ld c, h  ; save requested type (save it in register C)
	    cp h
	    exx
	    jr nz, dynamic_cast2  ; Types are identical?
	    ;; yes, they are
	    ex af, af'
	    ret

dynamic_cast2:
	    cp 1             ; Requested a number, but read a string?
	    jr nz, dynamic_cast3
	    call __MEM_FREE     ; Frees str from memory
	    jr __data_error

dynamic_cast3:
	    exx
	    ld b, a     ; Read type
	    ld a, c     ; Requested type
	    cp 1
	    jr z, __data_error
	    cp b
	    jr c, dynamic_cast4
	    ;; here the user expected type is "larger" than the read one
	    ld a, b
	    sub  2
	    add a, a
	    ld l, a
	    ld h, 0
	    ld de, _decode_table
	    add hl, de
	    ld e, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, e
	    push hl
	    ld a, c     ; Requested type
	    exx
	    ret

__data_error:
	    ;; When a data is read, but cannot be converted to the requested type
	    ;; that is, the user asked for a string and we read a number or vice versa
	    ld a, ERROR_InvalidArg
	    call __STOP  ; The user expected a string, but read a number
	    xor a
	    ld h, a
	    ld l, a
	    ld e, a
	    ld d, a
	    ld b, a
	    ld c, a
	    ret

_decode_table:
	    dw _from_i8
	    dw _from_u8
	    dw _from_i16
	    dw _from_u16
	    dw _from_i32
	    dw _from_u32
	    dw _from_fixed

_from_i8:
	    cp 4
	    jr nc, promote_to_i16
	    ex af, af'
	    ret     ;; Was from Byte to Ubyte

promote_to_i16:
	    ex af, af'
	    ld l, a
	    rla
	    sbc a, a
	    ld h, a     ; copy sgn to h
	    ex af, af'
	    jr _before_from_i16

_from_u8:
	    ex af, af'
	    ld l, a
	    ld h, 0
	    ex af, af'
	    ;; Promoted to i16

_before_from_i16:
_from_i16:
	    cp 6
	    ret c  ;; from i16 to u16
	    ;; Promote i16 to i32
	    ex af, af'
	    ld a, h
	    rla
	    sbc a, a
	    ld e, a
	    ld d, a
	    ex af, af'
_from_i32:
	    cp 7
	    ret z ;; From i32 to u32
	    ret c ;; From u16 to i32
	    cp 9
	    jp z, __I32TOFREG
_from_u32:
	    cp 9
	    jp z, __U32TOFREG
	    ex de, hl
	    ld hl, 0
	    cp 8
	    ret z
_from_fixed:  ;; From fixed to float
	    jp __F16TOFREG
_from_u16:
	    ld de, 0    ; HL 0x0000 => 32 bits
	    jp _from_i32

dynamic_cast4:
	    ;; The user type is "shorter" than the read one
	    cp 8 ;; required type
	    jr c, before_to_int  ;; required < fixed (f16)
	    ex af, af'
	    exx     ;; Ok, we must convert from float to f16
	    jp __FTOF16REG

before_to_int:
	    ld a, b ;; read type
	    cp 8 ;;
	    jr nz, coerce_to_int  ;; From float to int
	    ld a, c ;; user type
	    exx
	    ;; f16 to Long
	    ex de, hl
	    ld a, h
	    rla
	    sbc a, a
	    ld d, a
	    ld e, a
	    exx
	    jr coerce_to_int2
coerce_to_int:
	    exx
	    ex af, af'
	    call __FTOU32REG
	    ex af, af'   ; a contains user type
	    exx
coerce_to_int2:  ; At this point we have an u/integer in hl
	    exx
	    cp 4
	    ret nc       ; Already done. Return the result
	    ld a, l      ; Truncate to byte
	    ret

no_func:
	    exx
	    ld de, dynamic_cast
	    push de ; Ret address
	    dec a        ; 0 => string; 1, 2 => byte; 3, 4 => integer; 5, 6 => long, 7 => fixed; 8 => float
	    ld h, 0
	    add a, a
	    ld l, a
	    ld de, table
	    add hl, de
	    ld e, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, e
	    push hl ; address to jump to
	    exx
	    inc hl
	    ret     ; jp (sp)  => jump to table[a - 1]

table:
	    LOCAL __01_decode_string
	    LOCAL __02_decode_byte
	    LOCAL __03_decode_ubyte
	    LOCAL __04_decode_integer
	    LOCAL __05_decode_uinteger
	    LOCAL __06_decode_long
	    LOCAL __07_decode_ulong
	    LOCAL __08_decode_fixed
	    LOCAL __09_decode_float

	    ;; 1 -> Decode string
	    ;; 2, 3 -> Decode Byte, UByte
	    ;; 4, 5 -> Decode Integer, UInteger
	    ;; 6, 7 -> Decode Long, ULong
	    ;; 8 -> Decode Fixed
	    ;; 9 -> Decode Float
	    dw __01_decode_string
	    dw __02_decode_byte
	    dw __03_decode_ubyte
	    dw __04_decode_integer
	    dw __05_decode_uinteger
	    dw __06_decode_long
	    dw __07_decode_ulong
	    dw __08_decode_fixed
	    dw __09_decode_float

__01_decode_string:
	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    inc hl
	    ld (__DATA_ADDR), hl  ;; Store address of next DATA
	    ex de, hl
	    jp __LOADSTR

__02_decode_byte:
__03_decode_ubyte:
	    ld a, (hl)
	    inc hl
	    ld (__DATA_ADDR), hl
	    ret

__04_decode_integer:
__05_decode_uinteger:
	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    inc hl
	    ld (__DATA_ADDR), hl
	    ex de, hl
	    ret

__06_decode_long:
__07_decode_ulong:
__08_decode_fixed:
	    ld b, h
	    ld c, l
	    inc bc
	    inc bc
	    inc bc
	    inc bc
	    ld (__DATA_ADDR), bc
	    jp __ILOAD32

__09_decode_float:
	    call __LOADF
	    inc hl
	    ld (__DATA_ADDR), hl
	    ld h, a  ; returns A in H; sets A free
	    ret

__DATA_ADDR:  ;; Stores current DATA ptr
	    dw __DATA__0
	    ENDP










#line 3533 "snaker2021.zxbas"




#line 1 "strcat.asm"


#line 1 "strlen.asm"

	; Returns len if a string
	; If a string is NULL, its len is also 0
	; Result returned in HL

__STRLEN:	; Direct FASTCALL entry
			ld a, h
			or l
			ret z

			ld a, (hl)
			inc hl
			ld h, (hl)  ; LEN(str) in HL
			ld l, a
			ret


#line 3 "strcat.asm"

__ADDSTR:	; Implements c$ = a$ + b$
				; hl = &a$, de = &b$ (pointers)


__STRCAT2:	; This routine creates a new string in dynamic space
				; making room for it. Then copies a$ + b$ into it.
				; HL = a$, DE = b$

			PROC

			LOCAL __STR_CONT
			LOCAL __STRCATEND

			push hl
			call __STRLEN
			ld c, l
			ld b, h		; BC = LEN(a$)
			ex (sp), hl ; (SP) = LEN (a$), HL = a$
			push hl		; Saves pointer to a$

			inc bc
			inc bc		; +2 bytes to store length

			ex de, hl
			push hl
			call __STRLEN
			; HL = len(b$)

			add hl, bc	; Total str length => 2 + len(a$) + len(b$)

			ld c, l
			ld b, h		; BC = Total str length + 2
			call __MEM_ALLOC
			pop de		; HL = c$, DE = b$

			ex de, hl	; HL = b$, DE = c$
			ex (sp), hl ; HL = a$, (SP) = b$

			exx
			pop de		; D'E' = b$
			exx

			pop bc		; LEN(a$)

			ld a, d
			or e
		ret z		; If no memory: RETURN

__STR_CONT:
			push de		; Address of c$

			ld a, h
			or l
			jr nz, __STR_CONT1 ; If len(a$) != 0 do copy

	        ; a$ is NULL => uses HL = DE for transfer
			ld h, d
			ld l, e
			ld (hl), a	; This will copy 00 00 at (DE) location
	        inc de      ;
	        dec bc      ; Ensure BC will be set to 1 in the next step

__STR_CONT1:        ; Copies a$ (HL) into c$ (DE)
			inc bc
			inc bc		; BC = BC + 2
		ldir		; MEMCOPY: c$ = a$
			pop hl		; HL = c$

			exx
			push de		; Recovers b$; A ex hl,hl' would be very handy
			exx

			pop de		; DE = b$

__STRCAT: ; ConCATenate two strings a$ = a$ + b$. HL = ptr to a$, DE = ptr to b$
		  ; NOTE: Both DE, BC and AF are modified and lost
			  ; Returns HL (pointer to a$)
			  ; a$ Must be NOT NULL
			ld a, d
			or e
			ret z		; Returns if de is NULL (nothing to copy)

			push hl		; Saves HL to return it later

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl
			add hl, bc	; HL = end of (a$) string ; bc = len(a$)
			push bc		; Saves LEN(a$) for later

			ex de, hl	; DE = end of string (Begin of copy addr)
			ld c, (hl)
			inc hl
			ld b, (hl)	; BC = len(b$)

			ld a, b
			or c
			jr z, __STRCATEND; Return if len(b$) == 0

			push bc			 ; Save LEN(b$)
			inc hl			 ; Skip 2nd byte of len(b$)
			ldir			 ; Concatenate b$

			pop bc			 ; Recovers length (b$)
			pop hl			 ; Recovers length (a$)
			add hl, bc		 ; HL = LEN(a$) + LEN(b$) = LEN(a$+b$)
			ex de, hl		 ; DE = LEN(a$+b$)
			pop hl

			ld (hl), e		 ; Updates new LEN and return
			inc hl
			ld (hl), d
			dec hl
			ret

__STRCATEND:
			pop hl		; Removes Len(a$)
			pop hl		; Restores original HL, so HL = a$
			ret

			ENDP

#line 3538 "snaker2021.zxbas"
#line 1 "strictbool.asm"

	; This routine is called if --strict-boolean was set at the command line.
	; It will make any boolean result to be always 0 or 1

__NORMALIZE_BOOLEAN:
	    or a
	    ret z
	    ld a, 1
	    ret

#line 3539 "snaker2021.zxbas"
#line 1 "string.asm"

	; String library



__STR_ISNULL:	; Returns A = FF if HL is 0, 0 otherwise
			ld a, h
			or l
			sub 1		; Only CARRY if HL is NULL
			sbc a, a	; Only FF if HL is NULL (0 otherwise)
			ret


__STRCMP:	; Compares strings at HL, DE: Returns 0 if EQual, -1 if HL < DE, +1 if HL > DE
				; A register is preserved and returned in A'
			PROC ; __FASTCALL__

			LOCAL __STRCMPZERO
			LOCAL __STRCMPEXIT
			LOCAL __STRCMPLOOP
			LOCAL __NOPRESERVEBC
			LOCAL __EQULEN
			LOCAL __EQULEN1
			LOCAL __HLZERO

			ex af, af'	; Saves current A register in A' (it's used by STRXX comparison functions)

			ld a, h
			or l
			jr z, __HLZERO

			ld a, d
			or e
			ld a, 1
			ret z		; Returns +1 if HL is not NULL and DE is NULL

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl		; BC = LEN(a$)
			push hl		; HL = &a$, saves it

			ex de, hl
			ld e, (hl)
			inc hl
			ld d, (hl)
			inc hl
			ex de, hl	; HL = LEN(b$), de = &b$

			; At this point Carry is cleared, and A reg. = 1
			sbc hl, bc	; Carry if len(b$) > len(a$)
			jr z, __EQULEN	; Jump if they have the same length so A reg. = 0
			jr c, __EQULEN1 ; Jump if len(b$) > len(a$) so A reg. = 1
__NOPRESERVEBC:
			add hl, bc	; Restore HL (original length)
			ld b, h		; len(b$) <= len(a$)
			ld c, l		; so BC = hl
			dec a		; At this point A register = 0, it must be -1 since len(a$) > len(b$)
__EQULEN:
			dec a		; A = 0 if len(a$) = len(b$), -1 otherwise
__EQULEN1:
			pop hl		; Recovers A$ pointer
			push af		; Saves A for later (Value to return if strings reach the end)
	        ld a, b
	        or c
	        jr z, __STRCMPZERO ; empty string being compared

		; At this point: BC = lesser length, DE and HL points to b$ and a$ chars respectively
__STRCMPLOOP:
			ld a, (de)
			cpi
			jr nz, __STRCMPEXIT ; (HL) != (DE). Examine carry
			jp po, __STRCMPZERO ; END of string (both are equal)
			inc de
			jp __STRCMPLOOP

__STRCMPZERO:
			pop af		; This is -1 if len(a$) < len(b$), +1 if len(b$) > len(a$), 0 otherwise
			ret

__STRCMPEXIT:		; Sets A with the following value
			dec hl		; Get back to the last char
			cp (hl)
			sbc a, a	; A = -1 if carry => (DE) < (HL); 0 otherwise (DE) > (HL)
			cpl			; A = -1 if (HL) < (DE), 0 otherwise
			add a, a    ; A = A * 2 (thus -2 or 0)
			inc a		; A = A + 1 (thus -1 or 1)

			pop bc		; Discard top of the stack
			ret

__HLZERO:
			or d
			or e
			ret z		; Returns 0 (EQ) if HL == DE == NULL
			ld a, -1
			ret			; Returns -1 if HL is NULL and DE is not NULL

			ENDP

			; The following routines perform string comparison operations (<, >, ==, etc...)
			; On return, A will contain 0 for False, other value for True
			; Register A' will determine whether the incoming strings (HL, DE) will be freed
		; from dynamic memory on exit:
			;		Bit 0 => 1 means HL will be freed.
			;		Bit 1 => 1 means DE will be freed.

__STREQ:	; Compares a$ == b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			;inc a		; If A == -1, return 0
			;jp z, __FREE_STR

			;dec a		;
			;dec a		; Return -1 if a = 0 (True), returns 0 if A == 1 (False)
	        sub 1
	        sbc a, a
			jp __FREE_STR


__STRNE:	; Compares a$ != b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			;jp z, __FREE_STR

			;ld a, 0FFh	; Returns 0xFFh (True)
			jp __FREE_STR


__STRLT:	; Compares a$ < b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			jp z, __FREE_STR ; Returns 0 if A == B

			dec a		; Returns 0 if A == 1 => a$ > b$
			;jp z, __FREE_STR

			;inc a		; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRLE:	; Compares a$ <= b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			dec a		; Returns 0 if A == 1 => a$ < b$
			;jp z, __FREE_STR

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRGT:	; Compares a$ > b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			jp z, __FREE_STR		; Returns 0 if A == B

			inc a		; Returns 0 if A == -1 => a$ < b$
			;jp z, __FREE_STR		; Returns 0 if A == B

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRGE:	; Compares a$ >= b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			inc a		; Returns 0 if A == -1 => a$ < b$
			;jr z, __FREE_STR

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return

__FREE_STR: ; This exit point will test A' for bits 0 and 1
				; If bit 0 is 1 => Free memory from HL pointer
				; If bit 1 is 1 => Free memory from DE pointer
				; Finally recovers A, to return the result
			PROC

			LOCAL __FREE_STR2
			LOCAL __FREE_END

			ex af, af'
			bit 0, a
			jr z, __FREE_STR2

			push af
			push de
			call __MEM_FREE
			pop de
			pop af

__FREE_STR2:
			bit 1, a
			jr z, __FREE_END

			ex de, hl
			call __MEM_FREE

__FREE_END:
			ex af, af'
			ret

			ENDP

#line 3540 "snaker2021.zxbas"

#line 1 "strslice.asm"

	; String slicing library
	; HL = Str pointer
	; DE = String start
	; BC = String character end
	; A register => 0 => the HL pointer wont' be freed from the HEAP
	; e.g. a$(5 TO 10) => HL = a$; DE = 5; BC = 10

	; This implements a$(X to Y) being X and Y first and
	; last characters respectively. If X > Y, NULL is returned

	; Otherwise returns a pointer to a$ FROM X to Y (starting from 0)
	; if Y > len(a$), then a$ will be padded with spaces (reallocating
	; it in dynamic memory if needed). Returns pointer (HL) to resulting
	; string. NULL (0) if no memory for padding.
	;





__STRSLICE:			; Callee entry
		pop hl			; Return ADDRESS
		pop bc			; Last char pos
		pop de			; 1st char pos
		ex (sp), hl		; CALLEE. -> String start

__STRSLICE_FAST:	; __FASTCALL__ Entry
		PROC

		LOCAL __CONT
		LOCAL __EMPTY
		LOCAL __FREE_ON_EXIT

		push hl			; Stores original HL pointer to be recovered on exit
		ex af, af'		; Saves A register for later

		push hl
		call __STRLEN
		inc bc			; Last character position + 1 (string starts from 0)
		or a
		sbc hl, bc		; Compares length with last char position
		jr nc, __CONT	; If Carry => We must copy to end of string
		add hl, bc		; Restore back original LEN(a$) in HL
		ld b, h
		ld c, l			; Copy to the end of str
		ccf				; Clears Carry flag for next subtraction

__CONT:
		ld h, b
		ld l, c			; HL = Last char position to copy (1 for char 0, 2 for char 1, etc)
		sbc hl, de		; HL = LEN(a$) - DE => Number of chars to copy
		jr z, __EMPTY	; 0 Chars to copy => Return HL = 0 (NULL STR)
		jr c, __EMPTY	; If Carry => Nothing to return (NULL STR)

		ld b, h
		ld c, l			; BC = Number of chars to copy
		inc bc
		inc bc			; +2 bytes for string length number

		push bc
		push de
		call __MEM_ALLOC
		pop de
		pop bc
		ld a, h
		or l
		jr z, __EMPTY	; Return if NULL (no memory)

		dec bc
		dec bc			; Number of chars to copy (Len of slice)

		ld (hl), c
		inc hl
		ld (hl), b
		inc hl			; Stores new string length

		ex (sp), hl		; Pointer to A$ now in HL; Pointer to new string chars in Stack
		inc hl
		inc hl			; Skip string length
		add hl, de		; Were to start from A$
		pop de			; Start of new string chars
		push de			; Stores it again
		ldir			; Copies BC chars
		pop de
		dec de
		dec de			; Points to String LEN start
		ex de, hl		; Returns it in HL
		jr __FREE_ON_EXIT

__EMPTY:			; Return NULL (empty) string
		pop hl
		ld hl, 0		; Return NULL


__FREE_ON_EXIT:
		ex af, af'		; Recover original A register
		ex (sp), hl		; Original HL pointer

		or a
		call nz, __MEM_FREE

		pop hl			; Recover result
		ret

		ENDP

#line 3542 "snaker2021.zxbas"
#line 1 "sub32.asm"

	; SUB32
	; Perform TOP of the stack - DEHL
	; Pops operand out of the stack (CALLEE)
	; and returns result in DEHL. Carry an Z are set correctly

__SUB32:
		exx
		pop bc		; saves return address in BC'
		exx

		or a        ; clears carry flag
		ld b, h     ; Operands come reversed => BC <- HL,  HL = HL - BC
		ld c, l
		pop hl
		sbc hl, bc
		ex de, hl

		ld b, h	    ; High part (DE) now in HL. Repeat operation
		ld c, l
		pop hl
		sbc hl, bc
		ex de, hl   ; DEHL now has de 32 bit result

		exx
		push bc		; puts return address back
		exx
		ret
#line 3543 "snaker2021.zxbas"
#line 1 "usr_str.asm"

	; This function just returns the address of the UDG of the given str.
	; If the str is EMPTY or not a letter, 0 is returned and ERR_NR set
; to "A: Invalid Argument"

	; On entry HL points to the string
	; and A register is non-zero if the string must be freed (TMP string)





USR_STR:
	    PROC
	    ex af, af'     ; Saves A flag

		ld a, h
		or l
		jr z, USR_ERROR ; a$ = NULL => Invalid Arg

	    ld d, h         ; Saves HL in DE, for
	    ld e, l         ; later usage

		ld c, (hl)
		inc hl
		ld a, (hl)
		or c
		jr z, USR_ERROR ; a$ = "" => Invalid Arg

		inc hl
		ld a, (hl) ; Only the 1st char is needed
		and 11011111b ; Convert it to UPPER CASE
		sub 144   ; CODE(UDG "A")
		jr nc, CONT
		add a, 144   ; It was a letter
		sub 'A'

	    LOCAL CONT
CONT:

		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl	 ; hl = A * 8
		ld bc, (UDG)
		add hl, bc

	    ;; Now checks if the string must be released
	    ex af, af'  ; Recovers A flag
	    or a
	    ret z   ; return if not

	    push hl ; saves result since __MEM_FREE changes HL
	    ex de, hl   ; Recovers original HL value
	    call __MEM_FREE
	    pop hl
		ret

USR_ERROR:
	    ex de, hl   ; Recovers original HL value
	    ex af, af'  ; Recovers A flag
	    or a
	    call nz, __MEM_FREE

		ld a, ERROR_InvalidArg
		ld (ERR_NR), a
		ld hl, 0
		ret
		ENDP

#line 3544 "snaker2021.zxbas"
#line 1 "val.asm"





VAL: ; Computes VAL(a$) using ROM FP-CALC
		 ; HL = address of a$
		 ; Returns FP number in C ED LH registers
		 ; A Register = 1 => Free a$ on return

		PROC

		LOCAL STK_STO_S
		LOCAL __RET_ZERO
		LOCAL ERR_SP
		LOCAL STKBOT
		LOCAL RECLAIM1
	    LOCAL CH_ADD
		LOCAL __VAL_ERROR
		LOCAL __VAL_EMPTY
	    LOCAL SET_MIN

	RECLAIM1	EQU 6629
	STKBOT		EQU 23651
	ERR_SP		EQU 23613
	CH_ADD      EQU 23645
	STK_STO_S	EQU	2AB2h
	SET_MIN     EQU 16B0h

	    ld d, a ; Preserves A register in DE
		ld a, h
		or l
		jr z, __RET_ZERO ; NULL STRING => Return 0

	    push de ; Saves A Register (now in D)
		push hl	; Not null string. Save its address for later

		ld c, (hl)
		inc hl
		ld b, (hl)
		inc hl

		ld a, b
		or c
		jr z, __VAL_EMPTY ; Jumps VAL_EMPTY on empty string

		ex de, hl ; DE = String start

	    ld hl, (CH_ADD)
	    push hl

		ld hl, (STKBOT)
		push hl

		ld hl, (ERR_SP)
		push hl

	    ;; Now put our error handler on ERR_SP
		ld hl, __VAL_ERROR
		push hl
		ld hl, 0
		add hl, sp
		ld (ERR_SP), hl

		call STK_STO_S ; Enter it on the stack

		ld b, 1Dh ; "VAL"
		rst 28h	; ROM CALC
		defb 1Dh ; VAL
		defb 38h ; END CALC

		pop hl 	; Discards our current error handler
		pop hl
		ld (ERR_SP), hl	; Restores ERR_SP

		pop de	         ; old STKBOT
		ld hl, (STKBOT)  ; current SKTBOT
		call	RECLAIM1 ; Recover unused space

	    pop hl  ; Discards old CH_ADD value
		pop hl 	; String pointer
		pop af	; Deletion flag
		or a
		call nz, __MEM_FREE	; Frees string content before returning

	    ld a, ERROR_Ok      ; Sets OK in the result
	    ld (ERR_NR), a

		jp __FPSTACK_POP	; Recovers result and return from there

__VAL_ERROR:	; Jumps here on ERROR
		pop hl
		ld (ERR_SP), hl ; Restores ERR_SP

		ld hl, (STKBOT)  ; current SKTBOT
		pop de	; old STKBOT
	    pop hl
	    ld (CH_ADD), hl  ; Recovers old CH_ADD

	    call 16B0h       ; Resets temporary areas after an error

__VAL_EMPTY:	; Jumps here on empty string
		pop hl      ; Recovers initial string address
	pop af      ; String flag: If not 0 => it's temporary
		or a
		call nz, __MEM_FREE ; Frees "" string

__RET_ZERO:	; Returns 0 Floating point on error
		ld a, ERROR_Ok
		ld (ERR_NR), a

		xor a
		ld b, a
		ld c, a
		ld d, b
		ld e, c
		ret

		ENDP

#line 3545 "snaker2021.zxbas"

ZXBASIC_USER_DATA:
	_input_LastK EQU 23560
_StateInitialize:
	DEFB 00, 00
_StateShowHighScores:
	DEFB 00, 00
_StateShowInstructions:
	DEFB 00, 00
_StateStartGame:
	DEFB 00, 00
_StatePlayGame:
	DEFB 00, 00
_State:
	DEFB 00, 00
_reverseDirection:
	DEFW __LABEL190
_reverseDirection.__DATA__.__PTR__:
	DEFW _reverseDirection.__DATA__
_reverseDirection.__DATA__:
	DEFB 00h
	DEFB 04h
	DEFB 03h
	DEFB 02h
	DEFB 01h
__LABEL190:
	DEFW 0000h
	DEFB 01h
__LABEL173:
	DEFB 09h
__LABEL175:
	DEFB 0Ch
__LABEL181:
	DEFB 01h
__LABEL182:
	DEFB 4
__LABEL183:
	DEFB 14h
__LABEL185:
	DEFB 01h
	DEFB 00h
	DEFB 10h
	DEFB 00h
	DEFB 01h
__LABEL186:
	DEFB 00h
	DEFB 00h
	DEFB 04h
__LABEL187:
	DEFB 01h
	DEFB 00h
	DEFB 05h
	DEFB 00h
	DEFB 02h
__LABEL188:
	DEFB 01h
__LABEL189:
	DEFB 03h
ZXBASIC_MEM_HEAP:
	; Defines DATA END
ZXBASIC_USER_DATA_END EQU ZXBASIC_MEM_HEAP + ZXBASIC_HEAP_SIZE
	; Defines USER DATA Length in bytes
ZXBASIC_USER_DATA_LEN EQU ZXBASIC_USER_DATA_END - ZXBASIC_USER_DATA
	END
